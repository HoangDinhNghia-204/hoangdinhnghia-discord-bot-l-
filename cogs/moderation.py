# cogs/moderation.py
import discord
from discord.ext import commands
import datetime
import re
import database as db
import asyncio
from .utils import checks
from discord import app_commands

# --- L·ªöP VIEW X√ÅC NH·∫¨N ---


class ConfirmationView(discord.ui.View):
    def __init__(self, author):
        super().__init__(timeout=60.0)
        self.author = author
        self.confirmed = None

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i l√† y√™u c·∫ßu c·ªßa b·∫°n!", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="‚úÖ X√°c nh·∫≠n", style=discord.ButtonStyle.green)
    async def confirm_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = True
        for child in self.children:
            child.disabled = True
        await interaction.response.edit_message(view=self)
        self.stop()

    @discord.ui.button(label="‚ùå H·ªßy", style=discord.ButtonStyle.red)
    async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = False
        for child in self.children:
            child.disabled = True
        await interaction.response.edit_message(view=self)
        self.stop()


def parse_duration_mod(duration_str: str) -> (datetime.timedelta, str):
    match = re.match(r"(\d+)([mhd])", duration_str.lower())
    if not match:
        raise ValueError(
            "ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `10m`, `2h`, `7d`.")
    value, unit = int(match.group(1)), match.group(2)
    if unit == 'm':
        return (datetime.timedelta(minutes=value), f"{value} ph√∫t")
    if unit == 'h':
        return (datetime.timedelta(hours=value), f"{value} gi·ªù")
    if unit == 'd':
        return (datetime.timedelta(days=value), f"{value} ng√†y")


class Moderation(commands.Cog):
    """üõ†Ô∏è L·ªánh d√†nh cho Qu·∫£n tr·ªã vi√™n v√† ƒêi·ªÅu h√†nh vi√™n"""
    COG_EMOJI = "üõ†Ô∏è"

    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(name='clear', description="X√≥a nhanh m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn trong k√™nh.")
    @checks.has_permissions(manage_messages=True)
    @app_commands.rename(amount="s·ªë_l∆∞·ª£ng")
    async def clear(self, ctx: commands.Context, amount: int):
        if amount <= 0:
            return await ctx.send("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.", delete_after=5, ephemeral=True)
        if amount > 100:
            return await ctx.send("B·∫°n ch·ªâ c√≥ th·ªÉ x√≥a t·ªëi ƒëa 100 tin nh·∫Øn m·ªói l·∫ßn.", delete_after=5, ephemeral=True)

        # <<< S·ª¨A L·ªñI T·∫†I ƒê√ÇY >>>
        if ctx.interaction:
            # G·ªçi defer v√† followup t·ª´ ctx.interaction
            await ctx.interaction.response.defer(ephemeral=True)
            deleted = await ctx.channel.purge(limit=amount)
            await ctx.interaction.followup.send(f'‚úÖ ƒê√£ x√≥a **{len(deleted)}** tin nh·∫Øn.', ephemeral=True)
        else:  # L·ªánh prefix ho·∫°t ƒë·ªông nh∆∞ c≈©
            view = ConfirmationView(ctx.author)
            confirmation_msg = await ctx.send(f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a **{amount}** tin nh·∫Øn kh√¥ng?", view=view, delete_after=60)
            await view.wait()
            if view.confirmed is True:
                await confirmation_msg.delete()
                deleted = await ctx.channel.purge(limit=amount)
                await ctx.send(f'‚úÖ ƒê√£ x√≥a **{len(deleted)}** tin nh·∫Øn.', delete_after=5)
            elif view.confirmed is False:
                await confirmation_msg.edit(content="ƒê√£ h·ªßy thao t√°c.", view=None, delete_after=5)
            else:
                try:
                    for item in view.children:
                        item.disabled = True
                    await confirmation_msg.edit(content="Y√™u c·∫ßu ƒë√£ h·∫øt h·∫°n.", view=view, delete_after=5)
                except discord.NotFound:
                    pass

    @commands.hybrid_command(name='clearwarns', description="X√≥a h·∫øt c·∫£nh c√°o c·ªßa m·ªôt th√†nh vi√™n.")
    @checks.has_permissions(kick_members=True)
    @app_commands.rename(member="th√†nh_vi√™n")
    async def clearwarns(self, ctx: commands.Context, member: discord.Member):
        warnings_list = await db.get_warnings(member.id, ctx.guild.id)
        if not warnings_list:
            return await ctx.send(f"{member.display_name} kh√¥ng c√≥ c·∫£nh c√°o n√†o.", delete_after=10, ephemeral=True)

        view = ConfirmationView(ctx.author)
        confirmation_msg = await ctx.send(f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a **{len(warnings_list)}** c·∫£nh c√°o c·ªßa {member.mention} kh√¥ng?", view=view)

        await view.wait()
        if view.confirmed is True:
            count = await db.clear_warnings(member.id, ctx.guild.id)
            await confirmation_msg.edit(content=f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng **{count}** c·∫£nh c√°o c·ªßa {member.mention}.", view=None, embed=None, delete_after=10)
        elif view.confirmed is False:
            await confirmation_msg.edit(content="ƒê√£ h·ªßy thao t√°c.", view=None, delete_after=5)
        else:
            try:
                await confirmation_msg.edit(view=None)
            except discord.NotFound:
                pass

    @commands.hybrid_command(name='kick', description="ƒêu·ªïi m·ªôt th√†nh vi√™n kh·ªèi server.")
    @checks.has_permissions(kick_members=True)
    @app_commands.rename(member="th√†nh_vi√™n", reason="l√Ω_do")
    async def kick(self, ctx: commands.Context, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do."):
        if member == ctx.author or (ctx.author.top_role <= member.top_role and ctx.guild.owner != ctx.author):
            return await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn kick ng∆∞·ªùi n√†y.", ephemeral=True)
        if ctx.guild.me.top_role <= member.top_role:
            return await ctx.send("Bot kh√¥ng c√≥ quy·ªÅn kick ng∆∞·ªùi n√†y do vai tr√≤ c·ªßa h·ªç cao h∆°n ho·∫∑c b·∫±ng bot.", ephemeral=True)

        embed = discord.Embed(title="üë¢ ƒêu·ªïi th√†nh vi√™n",
                              description=f"ƒê√£ ƒëu·ªïi {member.mention}.", color=0xDD2E44, timestamp=datetime.datetime.now(datetime.timezone.utc))
        embed.add_field(name="L√Ω do", value=reason)
        embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi {ctx.author.display_name}")
        await member.kick(reason=f"{reason} (B·ªüi {ctx.author})")
        await ctx.send(embed=embed)

    @commands.hybrid_command(name='ban', description="C·∫•m m·ªôt th√†nh vi√™n kh·ªèi server.")
    @checks.has_permissions(ban_members=True)
    @app_commands.rename(member="th√†nh_vi√™n", reason="l√Ω_do")
    async def ban(self, ctx: commands.Context, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do."):
        if member == ctx.author or (ctx.author.top_role <= member.top_role and ctx.guild.owner != ctx.author):
            return await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫•m ng∆∞·ªùi n√†y.", ephemeral=True)
        if ctx.guild.me.top_role <= member.top_role:
            return await ctx.send("Bot kh√¥ng c√≥ quy·ªÅn c·∫•m ng∆∞·ªùi n√†y do vai tr√≤ c·ªßa h·ªç cao h∆°n ho·∫∑c b·∫±ng bot.", ephemeral=True)

        embed = discord.Embed(
            title="üî® C·∫•m th√†nh vi√™n", description=f"ƒê√£ c·∫•m {member.mention}.", color=0x000000, timestamp=datetime.datetime.now(datetime.timezone.utc))
        embed.add_field(name="L√Ω do", value=reason)
        embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi {ctx.author.display_name}")
        await member.ban(reason=f"{reason} (B·ªüi {ctx.author})")
        await ctx.send(embed=embed)

    @commands.hybrid_command(name='unban', description="G·ª° c·∫•m cho m·ªôt ng∆∞·ªùi d√πng b·∫±ng ID c·ªßa h·ªç.")
    @checks.has_permissions(ban_members=True)
    @app_commands.rename(user_id="id_ng∆∞·ªùi_d√πng", reason="l√Ω_do")
    async def unban(self, ctx: commands.Context, user_id: str, *, reason: str = "G·ª° c·∫•m b·ªüi qu·∫£n tr·ªã vi√™n."):
        try:
            user = await self.bot.fetch_user(int(user_id))
            await ctx.guild.unban(user, reason=reason)
            await ctx.send(embed=discord.Embed(title="‚ôªÔ∏è G·ª° c·∫•m th√†nh c√¥ng", description=f"ƒê√£ g·ª° c·∫•m cho **{user.name}** (`{user.id}`).", color=discord.Color.green()))
        except (ValueError, discord.NotFound):
            await ctx.send(f'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID `{user_id}` trong danh s√°ch c·∫•m.', ephemeral=True)

    @commands.hybrid_command(name='restrict', description="C·∫•m chat m·ªôt th√†nh vi√™n trong m·ªôt kho·∫£ng th·ªùi gian.")
    @checks.has_permissions(manage_roles=True)
    @app_commands.rename(member="th√†nh_vi√™n", time_str="th·ªùi_gian", reason="l√Ω_do")
    async def restrict(self, ctx: commands.Context, member: discord.Member, time_str: str, *, reason: str = "Kh√¥ng c√≥ l√Ω do."):
        config = await db.get_or_create_config(ctx.guild.id)
        muted_role_id = config.get('muted_role_id')
        if not muted_role_id:
            return await ctx.send("‚ö†Ô∏è Role c·∫•m chat ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. D√πng `/set mutedrole`.", delete_after=10, ephemeral=True)
        muted_role = ctx.guild.get_role(muted_role_id)
        if not muted_role:
            return await ctx.send(f"‚ö†Ô∏è Role c·∫•m chat (ID: {muted_role_id}) kh√¥ng c√≤n t·ªìn t·∫°i.", delete_after=10, ephemeral=True)
        if muted_role in member.roles:
            return await ctx.send(f"‚ÑπÔ∏è {member.mention} ƒë√£ b·ªã c·∫•m chat t·ª´ tr∆∞·ªõc.", delete_after=10, ephemeral=True)

        try:
            duration_delta, duration_text = parse_duration_mod(time_str)
        except ValueError as e:
            return await ctx.send(f"‚ùå {e}", delete_after=10, ephemeral=True)

        try:
            await member.add_roles(muted_role, reason=f"{reason} (B·ªüi {ctx.author})")
            expiry = datetime.datetime.now(
                datetime.timezone.utc) + duration_delta
            await db.add_temporary_role(member.id, ctx.guild.id, muted_role.id, expiry.isoformat())

            embed = discord.Embed(
                title="üö´ H·∫°n ch·∫ø th√†nh vi√™n", color=discord.Color.red())
            embed.description = f"ƒê√£ c·∫•m chat {member.mention}."
            embed.add_field(name="Th·ªùi gian", value=f"**{duration_text}**")
            embed.add_field(name="L√Ω do", value=reason, inline=False)
            embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi {ctx.author.display_name}")
            await ctx.send(embed=embed)
        except discord.Forbidden:
            await ctx.send("Bot kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ th√™m role c·∫•m chat cho th√†nh vi√™n n√†y.", delete_after=10, ephemeral=True)

    @commands.hybrid_command(name='unrestrict', description="G·ª° c·∫•m chat cho m·ªôt th√†nh vi√™n.")
    @checks.has_permissions(manage_roles=True)
    @app_commands.rename(member="th√†nh_vi√™n", reason="l√Ω_do")
    async def unrestrict(self, ctx: commands.Context, member: discord.Member, *, reason: str = "G·ª° h·∫°n ch·∫ø b·ªüi qu·∫£n tr·ªã vi√™n."):
        config = await db.get_or_create_config(ctx.guild.id)
        muted_role_id = config.get('muted_role_id')
        if not muted_role_id:
            return await ctx.send("‚ö†Ô∏è Role c·∫•m chat ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.", delete_after=10, ephemeral=True)
        muted_role = ctx.guild.get_role(muted_role_id)
        if not muted_role or muted_role not in member.roles:
            return await ctx.send(f"‚ÑπÔ∏è {member.mention} hi·ªán kh√¥ng b·ªã c·∫•m chat.", delete_after=10, ephemeral=True)

        try:
            await member.remove_roles(muted_role, reason=f"{reason} (B·ªüi {ctx.author})")
            await db.remove_temporary_role(member.id, ctx.guild.id, muted_role.id)
            embed = discord.Embed(
                title="‚úÖ G·ª° b·ªè h·∫°n ch·∫ø", description=f"ƒê√£ g·ª° c·∫•m chat cho {member.mention}.", color=discord.Color.green())
            await ctx.send(embed=embed)
        except discord.Forbidden:
            await ctx.send("Bot kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ g·ª° role c·∫•m chat kh·ªèi th√†nh vi√™n n√†y.", delete_after=10, ephemeral=True)

    @commands.hybrid_command(name='warn', description="C·∫£nh c√°o m·ªôt th√†nh vi√™n.")
    @checks.has_permissions(kick_members=True)
    @app_commands.rename(member="th√†nh_vi√™n", reason="l√Ω_do")
    async def warn(self, ctx: commands.Context, member: discord.Member, *, reason: str = "Kh√¥ng c√≥ l√Ω do."):
        if member == ctx.author or (ctx.author.top_role <= member.top_role and ctx.guild.owner != ctx.author):
            return await ctx.send("B·∫°n kh√¥ng th·ªÉ c·∫£nh c√°o ng∆∞·ªùi n√†y.", ephemeral=True)

        await db.add_warning(member.id, ctx.guild.id, ctx.author.id, reason)
        embed = discord.Embed(title="‚ö†Ô∏è ƒê√£ c·∫£nh c√°o th√†nh vi√™n", color=discord.Color.orange(
        ), timestamp=datetime.datetime.now(datetime.timezone.utc))
        embed.add_field(name="Th√†nh vi√™n", value=member.mention, inline=True)
        embed.add_field(name="Ng∆∞·ªùi th·ª±c hi·ªán",
                        value=ctx.author.mention, inline=True)
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.set_thumbnail(url=member.display_avatar.url)
        await ctx.send(embed=embed)
        try:
            await member.send(f"B·∫°n ƒë√£ nh·∫≠n m·ªôt c·∫£nh c√°o t·∫°i server **{ctx.guild.name}**. L√Ω do: {reason}")
        except discord.Forbidden:
            pass

    @commands.hybrid_command(name='warnings', description="Xem l·ªãch s·ª≠ c·∫£nh c√°o c·ªßa m·ªôt th√†nh vi√™n.")
    @checks.has_permissions(kick_members=True)
    @app_commands.rename(member="th√†nh_vi√™n")
    async def warnings(self, ctx: commands.Context, member: discord.Member):
        warnings_list = await db.get_warnings(member.id, ctx.guild.id)
        embed = discord.Embed(
            title=f"L·ªãch s·ª≠ c·∫£nh c√°o c·ªßa {member.display_name}", color=discord.Color.orange())
        embed.set_thumbnail(url=member.display_avatar.url)

        if not warnings_list:
            embed.description = "Ng∆∞·ªùi d√πng n√†y kh√¥ng c√≥ c·∫£nh c√°o n√†o."
        else:
            description = ""
            for i, warn_data in enumerate(warnings_list):
                mod = ctx.guild.get_member(
                    warn_data['moderator_id']) or f"ID: {warn_data['moderator_id']}"
                ts = int(datetime.datetime.fromisoformat(
                    warn_data['timestamp']).timestamp())
                description += f"**#{i+1}** | <t:{ts}:R> b·ªüi {mod.mention if isinstance(mod, discord.Member) else mod}\n> **L√Ω do:** {warn_data['reason']}\n"
            embed.description = description

        await ctx.send(embed=embed)

    @commands.hybrid_group(name="set", description="C√°c l·ªánh c·∫•u h√¨nh cho server (Admin).")
    async def _set(self, ctx: commands.Context):
        await ctx.send_help(ctx.command)

    @_set.command(name="welcome", description="ƒê·∫∑t k√™nh ch√†o m·ª´ng th√†nh vi√™n m·ªõi.")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(channel="k√™nh")
    async def set_welcome(self, ctx: commands.Context, channel: discord.TextChannel):
        await db.update_config(ctx.guild.id, 'welcome_channel_id', channel.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t k√™nh ch√†o m·ª´ng l√† {channel.mention}.", ephemeral=True)

    @_set.command(name="goodbye", description="ƒê·∫∑t k√™nh th√¥ng b√°o th√†nh vi√™n r·ªùi ƒëi.")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(channel="k√™nh")
    async def set_goodbye(self, ctx: commands.Context, channel: discord.TextChannel):
        await db.update_config(ctx.guild.id, 'goodbye_channel_id', channel.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t k√™nh t·∫°m bi·ªát l√† {channel.mention}.", ephemeral=True)

    @_set.command(name="announcement", description="ƒê·∫∑t k√™nh th√¥ng b√°o chung (l√™n c·∫•p, tr√∫ng th∆∞·ªüng...).")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(channel="k√™nh")
    async def set_announcement(self, ctx: commands.Context, channel: discord.TextChannel):
        await db.update_config(ctx.guild.id, 'announcement_channel_id', channel.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t k√™nh th√¥ng b√°o l√† {channel.mention}.", ephemeral=True)

    @_set.command(name="commandchannel", description="ƒê·∫∑t k√™nh ri√™ng cho l·ªánh (s·∫Ω kh√¥ng nh·∫≠n XP/coin khi chat).")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(channel="k√™nh")
    async def set_commandchannel(self, ctx: commands.Context, channel: discord.TextChannel):
        await db.update_config(ctx.guild.id, 'command_channel_id', channel.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t k√™nh l·ªánh l√† {channel.mention}. XP v√† Coin s·∫Ω kh√¥ng ƒë∆∞·ª£c t√≠nh ·ªü ƒë√¢y.", ephemeral=True)

    @_set.command(name="mutedrole", description="ƒê·∫∑t role ƒë·ªÉ c·∫•m chat th√†nh vi√™n.")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(role="role")
    async def set_mutedrole(self, ctx: commands.Context, role: discord.Role):
        if role >= ctx.guild.me.top_role:
            return await ctx.send(f"‚ùå Bot kh√¥ng th·ªÉ qu·∫£n l√Ω role {role.mention}. Vui l√≤ng k√©o role c·ªßa bot l√™n tr√™n.", ephemeral=True)
        await db.update_config(ctx.guild.id, 'muted_role_id', role.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t role c·∫•m chat l√† {role.mention}. H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ c·∫•u h√¨nh quy·ªÅn cho role n√†y!", ephemeral=True)

    @_set.command(name="luckrole", description="ƒê·∫∑t role may m·∫Øn (tƒÉng t·ªâ l·ªá nh·∫≠n th∆∞·ªüng).")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(role="role")
    async def set_luckrole(self, ctx: commands.Context, role: discord.Role):
        await db.update_config(ctx.guild.id, 'luck_role_id', role.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t **{role.mention}** l√†m role 'Thi√™n M·ªánh Chi T·ª≠'.", ephemeral=True)

    @_set.command(name="toprole", description="ƒê·∫∑t role th∆∞·ªüng cho top 1 leaderboard h√†ng tu·∫ßn.")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(role="role")
    async def set_toprole(self, ctx: commands.Context, role: discord.Role):
        await db.update_config(ctx.guild.id, 'top_role_id', role.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t **{role.mention}** l√†m role th∆∞·ªüng cho Top 1 h√†ng tu·∫ßn.", ephemeral=True)

    @_set.command(name="viprole", description="ƒê·∫∑t role VIP nh·∫≠n boost kinh t·∫ø.")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(role="role")
    async def set_viprole(self, ctx: commands.Context, role: discord.Role):
        await db.update_config(ctx.guild.id, 'vip_role_id', role.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t **{role.mention}** l√†m role VIP.", ephemeral=True)

    @_set.command(name="debtorrole", description="ƒê·∫∑t role cho ng∆∞·ªùi ch∆°i v·ª° n·ª£.")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(role="role")
    async def set_debtorrole(self, ctx: commands.Context, role: discord.Role):
        await db.update_config(ctx.guild.id, 'debtor_role_id', role.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t **{role.mention}** l√†m role V·ª° N·ª£.", ephemeral=True)

    @_set.command(name="rainbowrole", description="ƒê·∫∑t role s·∫Ω ƒë∆∞·ª£c d√πng cho hi·ªáu ·ª©ng t√™n c·∫ßu v·ªìng.")
    @checks.has_permissions(manage_guild=True)
    @app_commands.rename(role="role")
    async def set_rainbowrole(self, ctx: commands.Context, role: discord.Role):
        if role >= ctx.guild.me.top_role:
            return await ctx.send(f"‚ùå Bot kh√¥ng th·ªÉ qu·∫£n l√Ω role {role.mention}. Vui l√≤ng k√©o role c·ªßa bot l√™n tr√™n.", ephemeral=True)
        await db.update_config(ctx.guild.id, 'rainbow_role_id', role.id)
        await ctx.send(f"‚úÖ ƒê√£ ƒë·∫∑t **{role.mention}** l√†m role C·∫ßu V·ªìng.", ephemeral=True)

    @commands.hybrid_group(name="eco", description="C√°c l·ªánh qu·∫£n l√Ω kinh t·∫ø c·ªßa th√†nh vi√™n (Admin).")
    async def eco(self, ctx: commands.Context):
        await ctx.send_help(ctx.command)

    @eco.command(name="set", description="ƒê·∫∑t s·ªë coin c·ªßa m·ªôt th√†nh vi√™n th√†nh gi√° tr·ªã c·ª• th·ªÉ.")
    @checks.is_administrator()
    @app_commands.rename(member="th√†nh_vi√™n", amount="s·ªë_ti·ªÅn")
    async def eco_set(self, ctx: commands.Context, member: discord.Member, amount: int):
        if amount < 0:
            return await ctx.send("S·ªë ti·ªÅn kh√¥ng th·ªÉ l√† s·ªë √¢m.", ephemeral=True)
        await db.set_coins(member.id, ctx.guild.id, amount)
        embed = discord.Embed(
            description=f"‚úÖ ƒê√£ ƒë·∫∑t s·ªë d∆∞ c·ªßa {member.mention} th√†nh **{amount:,}** coin.", color=discord.Color.green())
        await ctx.send(embed=embed)

    @eco.command(name="add", description="C·ªông th√™m coin v√†o t√†i kho·∫£n c·ªßa th√†nh vi√™n.")
    @checks.is_administrator()
    @app_commands.rename(member="th√†nh_vi√™n", amount="s·ªë_ti·ªÅn")
    async def eco_add(self, ctx: commands.Context, member: discord.Member, amount: int):
        if amount <= 0:
            return await ctx.send("S·ªë ti·ªÅn c·∫ßn c·ªông ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        await db.update_coins(member.id, ctx.guild.id, amount)
        new_balance_data = await db.get_or_create_user(member.id, ctx.guild.id)
        embed = discord.Embed(
            description=f"‚úÖ ƒê√£ c·ªông **{amount:,}** coin cho {member.mention}.\nS·ªë d∆∞ m·ªõi: **{new_balance_data['coins']:,}** coin.", color=discord.Color.blue())
        await ctx.send(embed=embed)

    @eco.command(name="remove", aliases=['sub'], description="Tr·ª´ b·ªõt coin kh·ªèi t√†i kho·∫£n c·ªßa th√†nh vi√™n.")
    @checks.is_administrator()
    @app_commands.rename(member="th√†nh_vi√™n", amount="s·ªë_ti·ªÅn")
    async def eco_remove(self, ctx: commands.Context, member: discord.Member, amount: int):
        if amount <= 0:
            return await ctx.send("S·ªë ti·ªÅn c·∫ßn tr·ª´ ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        await db.update_coins(member.id, ctx.guild.id, -amount)
        new_balance_data = await db.get_or_create_user(member.id, ctx.guild.id)
        embed = discord.Embed(
            description=f"‚úÖ ƒê√£ tr·ª´ **{amount:,}** coin t·ª´ {member.mention}.\nS·ªë d∆∞ m·ªõi: **{new_balance_data['coins']:,}** coin.", color=discord.Color.red())
        await ctx.send(embed=embed)

    @commands.hybrid_group(name="invadmin", description="C√°c l·ªánh qu·∫£n l√Ω kho ƒë·ªì c·ªßa th√†nh vi√™n (Admin).")
    async def invadmin(self, ctx: commands.Context):
        await ctx.send_help(ctx.command)

    # cogs/moderation.py -> class Moderation

    @invadmin.command(name="add", description="Th√™m v·∫≠t ph·∫©m v√†o kho ƒë·ªì c·ªßa th√†nh vi√™n.")
    @checks.is_administrator()
    @app_commands.rename(member="th√†nh_vi√™n", item_id="id_v·∫≠t_ph·∫©m", quantity="s·ªë_l∆∞·ª£ng")
    async def invadmin_add(self, ctx: commands.Context, member: discord.Member, item_id: str, quantity: int = 1):
        # L·∫•y danh s√°ch item h·ª£p l·ªá t·ª´ file economy
        try:
            # <<< S·ª¨A L·ªñI T·∫†I ƒê√ÇY: ƒê·ªïi t·ª´ '..cogs.economy' th√†nh '.economy' >>>
            from .economy import SHOP_ITEMS
        except (ImportError, SystemError):
            await ctx.send("‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i danh s√°ch v·∫≠t ph·∫©m.", ephemeral=True)
            return

        if item_id not in SHOP_ITEMS:
            valid_ids = ", ".join([f"`{k}`" for k in SHOP_ITEMS.keys()])
            return await ctx.send(f"‚ùå ID v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá. C√°c ID c√≥ s·∫µn: {valid_ids}", ephemeral=True)

        if quantity <= 0:
            return await ctx.send("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)

        await db.add_item_to_inventory(member.id, ctx.guild.id, item_id, quantity)

        # X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho v√© x·ªï s·ªë
        if item_id == 'lottery_ticket':
            await db.add_lottery_tickets(ctx.guild.id, member.id, quantity)

        embed = discord.Embed(
            description=f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng **x{quantity}** v·∫≠t ph·∫©m `{item_id}` ({SHOP_ITEMS[item_id]['name']}) v√†o kho ƒë·ªì c·ªßa {member.mention}.",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)

    @invadmin.command(name="remove", description="X√≥a m·ªôt v·∫≠t ph·∫©m kh·ªèi kho ƒë·ªì c·ªßa th√†nh vi√™n.")
    @checks.is_administrator()
    @app_commands.rename(member="th√†nh_vi√™n", item_id="id_v·∫≠t_ph·∫©m", quantity="s·ªë_l∆∞·ª£ng")
    async def invadmin_remove(self, ctx: commands.Context, member: discord.Member, item_id: str, quantity: int = 1):
        if quantity <= 0:
            return await ctx.send("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)

        success = await db.remove_item_from_inventory(member.id, ctx.guild.id, item_id, quantity)
        if success:
            embed = discord.Embed(
                description=f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng **x{quantity}** v·∫≠t ph·∫©m `{item_id}` kh·ªèi kho ƒë·ªì c·ªßa {member.mention}.", color=discord.Color.green())
            await ctx.send(embed=embed)
        else:
            embed = discord.Embed(
                description=f"‚ùå Thao t√°c th·∫•t b·∫°i. {member.mention} kh√¥ng c√≥ ƒë·ªß **x{quantity}** v·∫≠t ph·∫©m `{item_id}`.", color=discord.Color.red())
            await ctx.send(embed=embed)

    @commands.hybrid_command(name="testcolor", description="(Ch·ªß Bot) L·ªánh debug ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng ƒë·ªïi m√†u role.", hidden=True)
    @commands.is_owner()
    async def test_color(self, ctx: commands.Context):
        await ctx.defer(ephemeral=True)
        config = await db.get_or_create_config(ctx.guild.id)
        rainbow_role_id = config.get('rainbow_role_id')
        if not rainbow_role_id:
            return await ctx.followup.send("‚ùå L·ªói: Role c·∫ßu v·ªìng ch∆∞a ƒë∆∞·ª£c set tr√™n server n√†y.", ephemeral=True)

        role = ctx.guild.get_role(rainbow_role_id)
        if not role:
            return await ctx.followup.send(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y role v·ªõi ID {rainbow_role_id}.", ephemeral=True)

        test_color = discord.Color.random()
        try:
            await role.edit(color=test_color, reason="Test color command")
            await ctx.followup.send(f"‚úÖ TH√ÄNH C√îNG! Role ƒë√£ ƒë∆∞·ª£c ƒë·ªïi m√†u sang `{test_color}`.", ephemeral=True)
        except discord.Forbidden:
            await ctx.followup.send("‚ùå TH·∫§T B·∫†I: Bot thi·∫øu quy·ªÅn (FORBIDDEN).", ephemeral=True)
        except Exception as e:
            await ctx.followup.send(f"‚ùå TH·∫§T B·∫†I: L·ªói kh√¥ng x√°c ƒë·ªãnh: `{e}`", ephemeral=True)

    @commands.hybrid_command(name="setup_tutien_roles", description="(Admin) T·ª± ƒë·ªông t·∫°o c√°c role Tu Ti√™n c·∫•p cao.", hidden=True)
    @checks.has_permissions(manage_roles=True)
    async def setup_tutien_roles(self, ctx: commands.Context):
        await ctx.defer()
        roles_to_create = [
            {'level': 540, 'emoji': '‚öúÔ∏è',
                'name': 'Thi√™n ƒê·∫°o Chi Ch·ªß', 'color': '#C3B1E1'},
            {'level': 580, 'emoji': '‚öñÔ∏è',
                'name': 'Ph√°p T·∫Øc Ch√≠ T√¥n', 'color': '#D9ABDE'},
            {'level': 620, 'emoji': 'ü™ê',
                'name': 'V·∫°n Gi·ªõi Th·∫ßn Ch·ªß', 'color': '#A0D6B4'},
            {'level': 660, 'emoji': '‚ôæÔ∏è',
                'name': 'V√¥ C·ª±c Th√°nh Nh√¢n', 'color': '#F8C8DC'},
            {'level': 710, 'emoji': 'üå™Ô∏è',
                'name': 'H·ªón ƒê·ªôn C·ªï Th·∫ßn', 'color': '#B5A6A5'},
            {'level': 760, 'emoji': '‚ò∏Ô∏è',
                'name': 'Lu√¢n H·ªìi Ch√∫a T·ªÉ', 'color': '#E3735E'},
            {'level': 820, 'emoji': '‚ö´',
                'name': 'H∆∞ V√¥ C·∫£nh Gi·ªõi', 'color': '#B2C2D2'},
            {'level': 880, 'emoji': 'üëë',
                'name': 'Nguy√™n S∆° Ch√∫a T·ªÉ', 'color': '#EAE6E1'},
            {'level': 940, 'emoji': '‚ú®',
                'name': 'ƒê·∫°i ƒê·∫°o H√≥a Th√¢n', 'color': '#F4E99B'},
            {'level': 999, 'emoji': 'üí†',
                'name': 'Thi√™n C·ªï Ch√∫a T·ªÉ', 'color': '#F7F5F0'},
        ]

        existing_roles = [role.name for role in ctx.guild.roles]
        created_count, skipped_count = 0, 0

        status_msg = await ctx.followup.send("‚è≥ B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o role Tu Ti√™n c·∫•p cao...")

        for role_data in roles_to_create:
            full_name = f"{role_data['emoji']} {role_data['name']}"
            if full_name in existing_roles:
                skipped_count += 1
                continue

            try:
                hex_color = role_data['color'].replace('#', '')
                color_obj = discord.Color(int(hex_color, 16))
                await ctx.guild.create_role(name=full_name, color=color_obj, reason="T·ª± ƒë·ªông thi·∫øt l·∫≠p h·ªá th·ªëng role Tu Ti√™n")
                await status_msg.edit(content=f"‚è≥ ƒê√£ t·∫°o th√†nh c√¥ng role: **{full_name}**")
                created_count += 1
                await asyncio.sleep(1)
            except discord.Forbidden:
                await status_msg.edit(content=f"‚ùå **L·ªñI:** Bot kh√¥ng c√≥ quy·ªÅn `Manage Roles`.")
                return
            except Exception as e:
                await ctx.channel.send(f"‚ö†Ô∏è G·∫∑p l·ªói khi t·∫°o role '{full_name}': {e}")

        final_message = f"üéâ **Ho√†n t·∫•t!**\n‚úÖ ƒê√£ t·∫°o m·ªõi: **{created_count}** role.\n‚ÑπÔ∏è B·ªè qua (ƒë√£ t·ªìn t·∫°i): **{skipped_count}** role."
        await status_msg.edit(content=final_message)


async def setup(bot):
    await bot.add_cog(Moderation(bot))
