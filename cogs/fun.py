# cogs/fun.py
import discord
from discord.ext import commands
import random
import asyncio
import database as db
from .utils import checks
import math
from discord import app_commands

# =============================================================
# NEW/UPDATED VIEWS AND MODALS
# =============================================================


class CreateNewLobbyView(discord.ui.View):
    """View chung ƒë·ªÉ t·∫°o l·∫°i c√°c lobby game nhi·ªÅu ng∆∞·ªùi ch∆°i."""

    def __init__(self, cog, original_ctx, game_name: str, bet_amount: int = 0):
        super().__init__(timeout=180.0)
        self.cog, self.original_ctx, self.game_name, self.bet_amount = cog, original_ctx, game_name, bet_amount

    async def interaction_check(
        self, interaction: discord.Interaction) -> bool: return True

    @discord.ui.button(label="T·∫°o B√†n M·ªõi", style=discord.ButtonStyle.green, emoji="‚ûï")
    async def new_lobby_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # 1. S·ª≠ d·ª•ng l·∫°i context g·ªëc ƒë·ªÉ ƒë·∫£m b·∫£o ·ªïn ƒë·ªãnh
        # v√† c·∫≠p nh·∫≠t ng∆∞·ªùi t∆∞∆°ng t√°c m·ªõi
        new_ctx = self.original_ctx
        new_ctx.author = interaction.user
        new_ctx.interaction = interaction

        # 2. Defer v√† x√≥a tin nh·∫Øn c≈©
        # Ph·∫£i defer tr∆∞·ªõc khi x√≥a ƒë·ªÉ tr√°nh l·ªói "Interaction failed"
        await interaction.response.defer()
        try:
            await interaction.message.delete()
        except (discord.NotFound, discord.HTTPException):
            pass  # B·ªè qua n·∫øu tin nh·∫Øn ƒë√£ b·ªã x√≥a

        # 3. L·∫•y c√°c cog m·ªôt c√°ch t∆∞·ªùng minh, kh√¥ng d·ª±a v√†o self.cog n·ªØa
        # =============================================================
        # <<< S·ª¨A L·ªñI T·∫†I ƒê√ÇY >>>
        # Thay self.bot b·∫±ng self.cog.bot
        fun_cog = self.cog.bot.get_cog('Fun')
        blackjack_cog = self.cog.bot.get_cog('Blackjack')
        # =============================================================

        # Ki·ªÉm tra xem c√°c cog c√≥ t·ªìn t·∫°i kh√¥ng
        if not fun_cog or not blackjack_cog:
            # G·ª≠i tin nh·∫Øn l·ªói n·∫øu kh√¥ng t√¨m th·∫•y cog c·∫ßn thi·∫øt
            await interaction.followup.send("L·ªói: Kh√¥ng th·ªÉ t√¨m th·∫•y module game c·∫ßn thi·∫øt. Vui l√≤ng li√™n h·ªá admin.", ephemeral=True)
            return

        # 4. T·∫°o map l·ªánh t·ª´ c√°c cog ƒë√£ l·∫•y ƒë∆∞·ª£c
        game_map = {
            'flip': fun_cog.flip,
            'duangua': fun_cog.horse_race,
            'taixiu': fun_cog.tai_xiu_table,
            'poker': fun_cog.poker_table,
            'blackjack': blackjack_cog.blackjack_table
        }

        # 5. G·ªçi l·ªánh t∆∞∆°ng ·ª©ng v·ªõi logic ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp
        if self.game_name in game_map:
            command_to_call = game_map[self.game_name]

            # ƒêua ng·ª±a l√† game duy nh·∫•t kh√¥ng c√≥ ti·ªÅn c∆∞·ª£c trong l·ªánh
            if self.game_name == 'duangua':
                await command_to_call(new_ctx)
            else:
                # T·∫•t c·∫£ c√°c game c√≤n l·∫°i ƒë·ªÅu c·∫ßn tham s·ªë bet_amount
                await command_to_call(new_ctx, self.bet_amount)
        else:
            await interaction.followup.send(f"L·ªói: Kh√¥ng t√¨m th·∫•y game c√≥ t√™n '{self.game_name}'.", ephemeral=True)


class SlotsRebetModal(discord.ui.Modal):
    def __init__(self, cog, original_ctx):
        super().__init__(title="B·∫Øt ƒê·∫ßu V√°n Slots M·ªõi")
        self.cog = cog
        self.original_ctx = original_ctx
        self.bet_amount_input = discord.ui.TextInput(
            label="Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c cho v√°n m·ªõi",
            placeholder="V√≠ d·ª•: 1000",
            required=True
        )
        self.add_item(self.bet_amount_input)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.message.delete()
        await interaction.response.defer()
        try:
            bet_amount = int(self.bet_amount_input.value)
            if bet_amount <= 0:
                raise ValueError
        except ValueError:
            return await interaction.followup.send("Vui l√≤ng nh·∫≠p m·ªôt s·ªë ti·ªÅn h·ª£p l·ªá.", ephemeral=True)
        await self.cog.slots(self.original_ctx, bet_amount)


class SlotsPlayAgainView(discord.ui.View):
    def __init__(self, cog, original_ctx):
        super().__init__(timeout=180.0)
        self.cog = cog
        self.original_ctx = original_ctx

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.user.id == self.original_ctx.author.id:
            return True
        await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i tr√≤ ch∆°i c·ªßa b·∫°n!", ephemeral=True)
        return False

    @discord.ui.button(label="Ch∆°i V√°n M·ªõi", style=discord.ButtonStyle.green, emoji="üîÅ")
    async def new_game_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(SlotsRebetModal(self.cog, self.original_ctx))

    @discord.ui.button(label="ƒê√≥ng", style=discord.ButtonStyle.red, emoji="‚úñÔ∏è")
    async def close_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.message.delete()


class RebetModal(discord.ui.Modal):
    """Modal chung ƒë·ªÉ nh·∫≠p l·∫°i ti·ªÅn c∆∞·ª£c cho c√°c game solo."""

    def __init__(self, title: str, cog, original_ctx, game_name: str):
        super().__init__(title=title)
        self.cog, self.original_ctx, self.game_name = cog, original_ctx, game_name
        self.bet_amount_input = discord.ui.TextInput(
            label="Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c cho v√°n m·ªõi", placeholder="1000", required=True)
        self.add_item(self.bet_amount_input)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.message.delete()
        await interaction.response.defer()
        try:
            bet_amount = int(self.bet_amount_input.value)
            if bet_amount <= 0:
                raise ValueError
        except ValueError:
            return await interaction.followup.send("Vui l√≤ng nh·∫≠p m·ªôt s·ªë ti·ªÅn h·ª£p l·ªá.", ephemeral=True)
        if self.game_name == 'slots':
            await self.cog.slots(self.original_ctx, bet_amount)
        elif self.game_name == 'coin':
            await self.cog.coin(self.original_ctx, bet_amount)


class PlayAgainView(discord.ui.View):
    """View chung cho c√°c game solo c√≥ c∆∞·ª£c."""

    def __init__(self, cog, original_ctx, game_name: str, modal_title: str):
        super().__init__(timeout=180.0)
        self.cog, self.original_ctx, self.game_name, self.modal_title = cog, original_ctx, game_name, modal_title

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.user.id == self.original_ctx.author.id:
            return True
        await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i tr√≤ ch∆°i c·ªßa b·∫°n!", ephemeral=True)
        return False

    @discord.ui.button(label="Ch∆°i V√°n M·ªõi", style=discord.ButtonStyle.green, emoji="üîÅ")
    async def new_game_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(RebetModal(self.modal_title, self.cog, self.original_ctx, self.game_name))

    @discord.ui.button(label="ƒê√≥ng", style=discord.ButtonStyle.red, emoji="‚úñÔ∏è")
    async def close_button(self, interaction: discord.Interaction,
                           button: discord.ui.Button): await interaction.message.delete()


class CoinNoBetView(discord.ui.View):
    """View ri√™ng cho /coin kh√¥ng c∆∞·ª£c."""

    def __init__(self, cog, original_ctx):
        super().__init__(timeout=180.0)
        self.cog, self.original_ctx = cog, original_ctx

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.user.id == self.original_ctx.author.id:
            return True
        await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i tr√≤ ch∆°i c·ªßa b·∫°n!", ephemeral=True)
        return False

    @discord.ui.button(label="Tung L·∫°i", style=discord.ButtonStyle.primary, emoji="ü™ô")
    async def flip_again(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.message.delete()
        await self.cog.coin(self.original_ctx, bet=0)


class RPSReplayView(discord.ui.View):
    """View ƒë·ªÉ th√°ch ƒë·∫•u l·∫°i ho·∫∑c ƒë√≥ng sau tr·∫≠n O·∫≥n t√π t√¨."""

    def __init__(self, cog, original_ctx, opponent: discord.Member, bet_amount: int):
        super().__init__(timeout=180.0)
        self.cog = cog
        self.original_ctx = original_ctx
        self.opponent = opponent
        self.bet_amount = bet_amount
        # N√∫t "Th√°ch ƒê·∫•u L·∫°i" s·∫Ω b·ªã v√¥ hi·ªáu h√≥a n·∫øu ƒë√¢y l√† tr·∫≠n kh√¥ng c∆∞·ª£c
        # v√† ƒë·ªëi th·ªß ƒë√£ r·ªùi server.
        if bet_amount == 0 and not self.original_ctx.guild.get_member(self.opponent.id):
            self.children[0].disabled = True

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        # Ch·ªâ ng∆∞·ªùi th√°ch ƒë·∫•u g·ªëc m·ªõi c√≥ th·ªÉ nh·∫•n "Th√°ch ƒë·∫•u l·∫°i"
        if interaction.data['custom_id'] == "rematch_button" and interaction.user.id != self.original_ctx.author.id:
            await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi th√°ch ƒë·∫•u ban ƒë·∫ßu m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.", ephemeral=True)
            return False
        # Ai c≈©ng c√≥ th·ªÉ nh·∫•n n√∫t "ƒê√≥ng"
        return True

    @discord.ui.button(label="Th√°ch ƒê·∫•u L·∫°i", style=discord.ButtonStyle.primary, emoji="‚öîÔ∏è", custom_id="rematch_button")
    async def rematch_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.message.delete()

        # C·∫≠p nh·∫≠t l·∫°i context v·ªõi ng∆∞·ªùi t∆∞∆°ng t√°c m·ªõi
        new_ctx = self.original_ctx
        new_ctx.author = interaction.user
        new_ctx.interaction = interaction

        # G·ªçi l·∫°i l·ªánh rps v·ªõi c√°c th√¥ng tin ƒë√£ l∆∞u
        await self.cog.rockpaperscissors(new_ctx, self.opponent, self.bet_amount)

    @discord.ui.button(label="ƒê√≥ng", style=discord.ButtonStyle.red, emoji="‚úñÔ∏è", custom_id="close_button")
    async def close_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.message.delete()
# =============================================================
# OTHER FUNCTIONS, VIEWS, AND MODALS
# =============================================================


def create_deck():
    suits, ranks = ["‚ô†Ô∏è", "‚ô£Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è"], ["A", "2", "3",
                                              "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
    deck = [(rank, suit) for rank in ranks for suit in suits]
    random.shuffle(deck)
    return deck


def score_hand(hand):
    if all(card[0] in ["J", "Q", "K"] for card in hand):
        return 10
    value = 0
    for card in hand:
        rank = card[0]
        if rank == "A":
            value += 1
        elif rank.isdigit():
            value += int(rank)
        elif rank in ["J", "Q", "K", "10"]:
            value += 10
    return value % 10


class ConfirmationView(discord.ui.View):
    def __init__(self, author):
        super().__init__(timeout=60.0)
        self.author = author
        self.confirmed = None

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i l√† y√™u c·∫ßu c·ªßa b·∫°n!", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="‚úÖ Ch·∫•p nh·∫≠n", style=discord.ButtonStyle.green)
    async def confirm_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = True
        for child in self.children:
            child.disabled = True
        await interaction.response.edit_message(view=self)
        self.stop()

    @discord.ui.button(label="‚ùå T·ª´ ch·ªëi", style=discord.ButtonStyle.red)
    async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.confirmed = False
        for child in self.children:
            child.disabled = True
        await interaction.response.edit_message(view=self)
        self.stop()


class CoinflipLobbyView(discord.ui.View):
    def __init__(self, host: discord.Member, bet_amount: int, cog):
        super().__init__(timeout=120.0)
        self.host, self.bet_amount, self.cog = host, bet_amount, cog
        self.players = {host}
        self.message = None
        self.original_ctx = None

    def create_embed(self) -> discord.Embed:
        embed = discord.Embed(title=f"ü™ô B√†n C∆∞·ª£c Tung ƒê·ªìng Xu - C∆∞·ª£c {self.bet_amount:,} Coin",
                              description="Ai mu·ªën th·ª≠ v·∫≠n may? Nh·∫•n n√∫t **Tham Gia**!", color=discord.Color.gold())
        player_list = "\n".join([p.mention for p in self.players])
        embed.add_field(
            name=f"Ng∆∞·ªùi ch∆°i ƒë√£ tham gia ({len(self.players)})", value=player_list or "Ch∆∞a c√≥ ai.")
        embed.set_footer(
            text=f"Ch·ªß x·ªã ({self.host.display_name}) c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ho·∫∑c h·ªßy.")
        return embed

    @discord.ui.button(label="Tham Gia", style=discord.ButtonStyle.green, emoji="üéüÔ∏è")
    async def join_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user in self.players:
            return await interaction.response.send_message("B·∫°n ƒë√£ tham gia r·ªìi!", ephemeral=True)
        user_data = await db.get_or_create_user(interaction.user.id, interaction.guild.id)
        if user_data['coins'] < self.bet_amount:
            return await interaction.response.send_message(f"B·∫°n kh√¥ng ƒë·ªß **{self.bet_amount:,}** coin.", ephemeral=True)
        self.players.add(interaction.user)
        await interaction.response.edit_message(embed=self.create_embed())

    @discord.ui.button(label="B·∫Øt ƒê·∫ßu", style=discord.ButtonStyle.primary, emoji="‚ñ∂Ô∏è")
    async def start_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.host.id:
            return await interaction.response.send_message("Ch·ªâ ch·ªß x·ªã m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu.", ephemeral=True)
        if len(self.players) < 2:
            return await interaction.response.send_message("C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi ch∆°i.", ephemeral=True)
        for player in self.players:
            await db.update_coins(player.id, interaction.guild.id, -self.bet_amount)
        game_view = CoinflipGameView(
            list(self.players), self.bet_amount, self.cog, self.original_ctx)
        game_view.message = self.message
        await interaction.response.edit_message(embed=game_view.create_embed(), view=game_view)
        self.stop()

    @discord.ui.button(label="H·ªßy", style=discord.ButtonStyle.red, emoji="‚úñÔ∏è")
    async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.host.id:
            return await interaction.response.send_message("Ch·ªâ ch·ªß x·ªã m·ªõi c√≥ th·ªÉ h·ªßy.", ephemeral=True)
        embed = self.create_embed()
        embed.title = "[ƒê√É H·ª¶Y] " + embed.title
        embed.description = "B√†n c∆∞·ª£c ƒë√£ ƒë∆∞·ª£c h·ªßy."
        embed.color = discord.Color.dark_grey()
        for child in self.children:
            child.disabled = True
        await interaction.response.edit_message(embed=embed, view=None)
        self.stop()


class CoinflipGameView(discord.ui.View):
    def __init__(self, players: list[discord.Member], bet_amount: int, cog, original_ctx):
        super().__init__(timeout=60.0)
        self.players, self.bet_amount, self.cog, self.original_ctx = players, bet_amount, cog, original_ctx
        self.choices = {p.id: None for p in self.players}
        self.message = None

    def create_embed(self) -> discord.Embed:
        embed = discord.Embed(
            title=f"ü™ô Tung ƒê·ªìng Xu - M·ª©c c∆∞·ª£c {self.bet_amount:,} Coin", description="**S·∫•p hay Ng·ª≠a?**", color=discord.Color.yellow())
        status_lines = [
            f"{p.mention}: {'‚úÖ' if self.choices[p.id] else 'ü§î'}" for p in self.players]
        embed.add_field(name="Tr·∫°ng th√°i", value="\n".join(status_lines))
        return embed

    async def resolve_game(self, interaction: discord.Interaction):
        self.stop()
        for c in self.children:
            c.disabled = True
        result = random.choice(["S·∫•p", "Ng·ª≠a"])
        winners = [p for p in self.players if self.choices[p.id] == result]
        losers = [p for p in self.players if self.choices[p.id]
                  != result and self.choices[p.id] is not None]
        embed = discord.Embed(
            title=f"K·∫øt Qu·∫£: ƒê·ªìng xu l√† **{result}**!", color=discord.Color.blue())
        embed.description = "\n".join(
            [f"{p.mention} ch·ªçn **{self.choices.get(p.id) or 'Kh√¥ng ch·ªçn'}**" for p in self.players])
        if not winners or not losers:
            embed.add_field(
                name="K·∫øt qu·∫£", value="**H√íA NHAU!** Ti·ªÅn c∆∞·ª£c ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.")
            for p in self.players:
                await db.update_coins(p.id, interaction.guild.id, self.bet_amount)
        else:
            winnings = (self.bet_amount * len(losers) //
                        len(winners)) + self.bet_amount
            embed.add_field(
                name=f"üéâ Phe {result} th·∫Øng! üéâ", value=f"{', '.join(w.mention for w in winners)} nh·∫≠n **{winnings:,}** coin m·ªói ng∆∞·ªùi.")
            for winner in winners:
                await db.update_coins(winner.id, interaction.guild.id, winnings)
                await db.update_quest_progress(winner.id, interaction.guild.id, 'FLIP_WIN')

        new_lobby_view = CreateNewLobbyView(
            self.cog, self.original_ctx, 'flip', self.bet_amount)
        await interaction.message.edit(embed=embed, view=new_lobby_view)

    async def handle_choice(self, interaction: discord.Interaction, choice: str):
        self.choices[interaction.user.id] = choice
        await interaction.response.send_message(f"B·∫°n ƒë√£ ch·ªçn **{choice}**!", ephemeral=True)
        await self.message.edit(embed=self.create_embed())
        if all(self.choices.values()):
            await self.resolve_game(interaction)

    @discord.ui.button(label="S·∫•p", emoji="üíø")
    async def heads(self, interaction: discord.Interaction,
                    button: discord.ui.Button): await self.handle_choice(interaction, "S·∫•p")

    @discord.ui.button(label="Ng·ª≠a", emoji="ü™ô")
    async def tails(self, interaction: discord.Interaction,
                    button: discord.ui.Button): await self.handle_choice(interaction, "Ng·ª≠a")


class RPSGameView(discord.ui.View):
    def __init__(self, challenger, opponent):
        super().__init__(timeout=60.0)
        self.challenger, self.opponent = challenger, opponent
        self.choices = {challenger.id: None, opponent.id: None}
        self.CHOICE_EMOJIS = {"b√∫a": "‚úä", "bao": "‚úã", "k√©o": "‚úåÔ∏è"}
        self.winner = None

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.user.id not in [self.challenger.id, self.opponent.id]:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i tr·∫≠n ƒë·∫•u c·ªßa b·∫°n!", ephemeral=True)
            return False
        if self.choices[interaction.user.id] is not None:
            await interaction.response.send_message("B·∫°n ƒë√£ ch·ªçn r·ªìi!", ephemeral=True)
            return False
        return True

    async def resolve_game(self, interaction: discord.Interaction):
        p1c, p2c = self.choices[self.challenger.id], self.choices[self.opponent.id]
        if p1c == p2c:
            self.winner = "h√≤a"
        elif (p1c, p2c) in [("b√∫a", "k√©o"), ("k√©o", "bao"), ("bao", "b√∫a")]:
            self.winner = self.challenger
        else:
            self.winner = self.opponent
        await interaction.message.delete()
        self.stop()

    async def handle_choice(self, interaction: discord.Interaction, choice: str):
        self.choices[interaction.user.id] = choice
        await interaction.response.send_message(f"B·∫°n ƒë√£ ch·ªçn **{choice.title()}**!", ephemeral=True)
        if all(self.choices.values()):
            await self.resolve_game(interaction)

    @discord.ui.button(emoji="‚úä")
    async def rock(self, interaction: discord.Interaction,
                   button: discord.ui.Button): await self.handle_choice(interaction, "b√∫a")

    @discord.ui.button(emoji="‚úã")
    async def paper(self, interaction: discord.Interaction,
                    button: discord.ui.Button): await self.handle_choice(interaction, "bao")

    @discord.ui.button(emoji="‚úåÔ∏è")
    async def scissors(self, interaction: discord.Interaction,
                       button: discord.ui.Button): await self.handle_choice(interaction, "k√©o")


class BetModal(discord.ui.Modal, title="ƒê·∫∑t C∆∞·ª£c ƒêua Ng·ª±a"):
    def __init__(self, view, horse_index: int):
        super().__init__()
        self.view, self.horse_index = view, horse_index
        self.horse_emoji = self.view.horses[self.horse_index]["emoji"]
        self.bet_amount_input = discord.ui.TextInput(
            label=f"Nh·∫≠p s·ªë coin c∆∞·ª£c cho {self.horse_emoji}", placeholder="1000", required=True)
        self.add_item(self.bet_amount_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            bet_amount = int(self.bet_amount_input.value)
            assert bet_amount > 0
        except:
            return await interaction.response.send_message("S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá.", ephemeral=True)
        user_data = await db.get_or_create_user(interaction.user.id, interaction.guild.id)
        if user_data['coins'] < bet_amount:
            return await interaction.response.send_message("B·∫°n kh√¥ng ƒë·ªß coin.", ephemeral=True)

        user_bets = self.view.bets.setdefault(interaction.user, [])
        for bet in user_bets:
            if bet["horse"] == self.horse_index:
                bet["amount"] += bet_amount
                break
        else:
            user_bets.append({"horse": self.horse_index, "amount": bet_amount})

        await interaction.response.edit_message(embed=self.view.create_lobby_embed(), view=self.view)


class HorseRacingLobbyView(discord.ui.View):
    def __init__(self, host: discord.Member, cog):
        super().__init__(timeout=120.0)
        self.host, self.cog = host, cog
        self.message = None
        self.bets = {}
        self.original_ctx = None
        emojis = ["üêé", "üèá", "ü¶ì", "ü¶Ñ", "üê¥", "üé†",
                  "‚ôû", "ü¶í", "üêò", "üêñ", "üêÑ", "üêÇ", "üêÖ", "üêÜ"]
        random.shuffle(emojis)
        self.horses = [{"emoji": e, "progress": 0} for e in emojis[:10]]

        for i, h in enumerate(self.horses):
            b = discord.ui.Button(
                label=h['emoji'], custom_id=f"bet_horse_{i}", row=i//5)
            b.callback = self.bet_button_callback
            self.add_item(b)

        start_btn = discord.ui.Button(
            label="B·∫Øt ƒë·∫ßu ƒêua!", style=discord.ButtonStyle.green, row=2)
        start_btn.callback = self.start_race_callback
        self.add_item(start_btn)

    async def bet_button_callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(BetModal(self, int(interaction.data["custom_id"].split("_")[-1])))

    def create_lobby_embed(self) -> discord.Embed:
        embed = discord.Embed(title="üèá Tr∆∞·ªùng ƒêua M·ªü C·ª≠a! üèá",
                              description="Ch·ªçn chi·∫øn m√£ v√† ƒë·∫∑t c∆∞·ª£c!", color=discord.Color.gold())
        bet_str = "\n".join(
            [f"{u.mention}: {', '.join([f'**{b['amount']:,}** cho {self.horses[b['horse']]['emoji']}' for b in bets])}" for u, bets in self.bets.items()])
        embed.add_field(name="üìú C∆∞·ª£c Th·ªß",
                        value=bet_str or "Ch∆∞a c√≥ ai ƒë·∫∑t c∆∞·ª£c.")
        embed.set_footer(
            text=f"Ch·ªß x·ªã ({self.host.display_name}) c√≥ th·ªÉ b·∫Øt ƒë·∫ßu.")
        return embed

    async def start_race_callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.host.id:
            return await interaction.response.send_message("Ch·ªâ ch·ªß x·ªã m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu.", ephemeral=True)
        if not self.bets:
            return await interaction.response.send_message("C·∫ßn √≠t nh·∫•t m·ªôt ng∆∞·ªùi c∆∞·ª£c.", ephemeral=True)
        await interaction.response.defer()
        self.stop()
        await self.cog.start_the_race(self)


class TaixiuLobbyView(discord.ui.View):
    def __init__(self, host: discord.Member, bet_amount: int, cog):
        super().__init__(timeout=120.0)
        self.host, self.bet_amount, self.cog = host, bet_amount, cog
        self.players = {host}
        self.message = None
        self.original_ctx = None

    def create_embed(self) -> discord.Embed:
        embed = discord.Embed(title=f"üé≤ B√†n C∆∞·ª£c T√†i X·ªâu - C∆∞·ª£c {self.bet_amount:,} Coin üé≤",
                              description="Nh·∫•n n√∫t **Tham Gia**!", color=discord.Color.orange())
        embed.add_field(name=f"Ng∆∞·ªùi ch∆°i ({len(self.players)})", value="\n".join(
            [p.mention for p in self.players]) or "Ch∆∞a c√≥ ai.")
        embed.set_footer(
            text=f"Ch·ªß x·ªã ({self.host.display_name}) c√≥ th·ªÉ b·∫Øt ƒë·∫ßu/h·ªßy.")
        return embed

    @discord.ui.button(label="Tham Gia", emoji="üéüÔ∏è")
    async def join(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user in self.players:
            return await interaction.response.send_message("B·∫°n ƒë√£ tham gia.", ephemeral=True)
        user_data = await db.get_or_create_user(interaction.user.id, interaction.guild.id)
        if user_data['coins'] < self.bet_amount:
            return await interaction.response.send_message(f"Kh√¥ng ƒë·ªß **{self.bet_amount:,}** coin.", ephemeral=True)
        self.players.add(interaction.user)
        await interaction.response.edit_message(embed=self.create_embed())

    @discord.ui.button(label="B·∫Øt ƒê·∫ßu", emoji="‚ñ∂Ô∏è")
    async def start(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.host.id:
            return await interaction.response.send_message("Ch·ªâ ch·ªß x·ªã c√≥ th·ªÉ b·∫Øt ƒë·∫ßu.", ephemeral=True)
        if len(self.players) < 2:
            return await interaction.response.send_message("C·∫ßn √≠t nh·∫•t 2 ng∆∞·ªùi.", ephemeral=True)
        for p in self.players:
            await db.update_coins(p.id, interaction.guild.id, -self.bet_amount)
        game_view = TaixiuGameView(
            list(self.players), self.bet_amount, self.cog, self.original_ctx)
        game_view.message = self.message
        await interaction.response.edit_message(embed=game_view.create_embed(), view=game_view)
        self.stop()

    @discord.ui.button(label="H·ªßy", emoji="‚úñÔ∏è")
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.host.id:
            return await interaction.response.send_message("Ch·ªâ ch·ªß x·ªã c√≥ th·ªÉ h·ªßy.", ephemeral=True)
        embed = self.create_embed()
        embed.title = "[ƒê√É H·ª¶Y] " + embed.title
        embed.description = "B√†n c∆∞·ª£c ƒë√£ h·ªßy."
        embed.color = discord.Color.dark_grey()
        for c in self.children:
            c.disabled = True
        await interaction.response.edit_message(embed=embed, view=None)
        self.stop()


class TaixiuGameView(discord.ui.View):
    def __init__(self, players: list[discord.Member], bet_amount: int, cog, original_ctx):
        super().__init__(timeout=60.0)
        self.players, self.bet_amount, self.cog, self.original_ctx = players, bet_amount, cog, original_ctx
        self.choices = {p.id: None for p in self.players}
        self.message = None

    def create_embed(self) -> discord.Embed:
        embed = discord.Embed(title=f"üé≤ T√†i X·ªâu - C∆∞·ª£c {self.bet_amount:,} Coin",
                              description="**T√†i, X·ªâu, hay H√≤a?**", color=discord.Color.yellow())
        embed.add_field(name="Tr·∫°ng th√°i", value="\n".join(
            [f"{p.mention}: {'‚úÖ' if self.choices[p.id] else 'ü§î'}" for p in self.players]))
        return embed

    async def resolve_game(self):
        self.stop()
        for c in self.children:
            c.disabled = True
        d1, d2 = random.randint(1, 6), random.randint(1, 6)
        total = d1 + d2
        result_str = "T√†i" if total > 7 else "X·ªâu" if total < 7 else "H√≤a"
        embed = discord.Embed(
            title=f"üé≤ K·∫æT QU·∫¢: {d1}+{d2} = {total} ({result_str})! üé≤")
        details = ""
        for p in self.players:
            choice = self.choices.get(p.id)
            if not choice:
                details += f"{p.mention} kh√¥ng ch·ªçn v√† m·∫•t **{self.bet_amount:,}** coin.\n"
                continue
            if choice == result_str:
                payout = self.bet_amount * (5 if choice == "H√≤a" else 2)
                await db.update_coins(p.id, p.guild.id, payout)
                details += f"üéâ {p.mention} c∆∞·ª£c **{choice}** v√† th·∫Øng **{payout:,}** coin!\n"
            else:
                details += f"üíî {p.mention} c∆∞·ª£c **{choice}** v√† thua **{self.bet_amount:,}** coin.\n"
        embed.description = details
        new_lobby_view = CreateNewLobbyView(
            self.cog, self.original_ctx, 'taixiu', self.bet_amount)
        await self.message.edit(embed=embed, view=new_lobby_view)

    async def handle_choice(self, interaction: discord.Interaction, choice: str):
        if interaction.user.id not in self.choices or self.choices[interaction.user.id]:
            return await interaction.response.send_message("L·ªói.", ephemeral=True)
        self.choices[interaction.user.id] = choice
        await interaction.response.send_message(f"B·∫°n ƒë√£ ch·ªçn **{choice}**!", ephemeral=True)
        await self.message.edit(embed=self.create_embed())
        if all(self.choices.values()):
            await self.resolve_game()

    @discord.ui.button(label="T√†i (>7)")
    async def tai(self, interaction: discord.Interaction,
                  button: discord.ui.Button): await self.handle_choice(interaction, "T√†i")

    @discord.ui.button(label="H√≤a (=7)", style=discord.ButtonStyle.secondary)
    async def hoa(self, interaction: discord.Interaction,
                  button: discord.ui.Button): await self.handle_choice(interaction, "H√≤a")

    @discord.ui.button(label="X·ªâu (<7)")
    async def xiu(self, interaction: discord.Interaction,
                  button: discord.ui.Button): await self.handle_choice(interaction, "X·ªâu")


class PokerRaiseModal(discord.ui.Modal, title="T·ªë Th√™m"):
    def __init__(self, view):
        super().__init__()
        self.view = view
        self.add_item(discord.ui.TextInput(
            label="S·ªë ti·ªÅn mu·ªën t·ªë th√™m", required=True))

    async def on_submit(self, interaction: discord.Interaction):
        try:
            amount = int(self.children[0].value)
            assert amount > 0
        except:
            return await interaction.response.send_message("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.", ephemeral=True)
        await self.view.handle_action(interaction, "raise", amount)


class PokerGameView(discord.ui.View):
    def __init__(self, players: list[discord.Member], initial_bet: int, message: discord.Message, cog, original_ctx):
        super().__init__(timeout=300.0)
        self.players, self.message, self.cog, self.original_ctx = players, message, cog, original_ctx
        self.deck = create_deck()
        self.dealer_hand = [self.deck.pop() for _ in range(3)]
        self.player_states = {p.id: {"hand": [self.deck.pop() for _ in range(
            3)], "status": "playing", "current_bet": initial_bet} for p in self.players}
        self.current_player_index = 0
        self.current_bet_to_match = initial_bet

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.data.get('custom_id') == "view_hand_button":
            return interaction.user.id in self.player_states
        if not self.players or self.is_finished() or self.current_player_index >= len(self.players):
            return False
        if interaction.user.id != self.players[self.current_player_index].id:
            await interaction.response.send_message("Ch∆∞a ƒë·∫øn l∆∞·ª£t c·ªßa b·∫°n.", ephemeral=True)
            return False
        return True

    def create_game_embed(self, show_all_hands=False) -> discord.Embed:
        current_player = self.players[self.current_player_index] if self.current_player_index < len(
            self.players) else None
        embed = discord.Embed(
            title="üÉè V√°n B√†i 3 L√° üÉè", description=f"ƒê·∫øn l∆∞·ª£t c·ªßa {current_player.mention if current_player else 'Nh√† C√°i'}!", color=discord.Color.dark_red())

        def format_hand(h): return " ".join([f"`{r}{s}`" for r, s in h])
        embed.add_field(name=f"B√†i Nh√† C√°i ({score_hand(self.dealer_hand) if show_all_hands else '?'})", value=format_hand(
            self.dealer_hand) if show_all_hands else "`? ?`"*3, inline=False)
        p_info = "\n".join([f"**{p.display_name}** ({score_hand(s['hand']) if show_all_hands else '?'} n√∫t): {format_hand(s['hand']) if show_all_hands else '`? ?`'*3} - **C∆∞·ª£c:** `{s['current_bet']:,}`" for p in self.players if (
            s := self.player_states[p.id])['status'] != 'folded'])
        embed.add_field(name="B√†n c∆∞·ª£c", value=p_info, inline=False)
        embed.set_footer(
            text=f"M·ª©c c∆∞·ª£c c·∫ßn theo: {self.current_bet_to_match:,} coin")
        return embed

    async def next_turn(self):
        active_players = [
            p for p in self.players if self.player_states[p.id]["status"] == "playing"]
        if len(active_players) <= 1:
            return True
        for _ in range(len(self.players)):
            self.current_player_index = (
                self.current_player_index + 1) % len(self.players)
            next_p = self.players[self.current_player_index]
            if self.player_states[next_p.id]["status"] == "playing" and self.player_states[next_p.id]["current_bet"] < self.current_bet_to_match:
                return False
        return True

    async def handle_action(self, interaction: discord.Interaction, action: str, amount=0):
        await interaction.response.defer()
        p_state = self.player_states[interaction.user.id]
        if action == "fold":
            p_state["status"] = "folded"
        elif action in ["call", "raise"]:
            to_pay = (self.current_bet_to_match -
                      p_state["current_bet"]) + (amount if action == "raise" else 0)
            user_data = await db.get_or_create_user(interaction.user.id, interaction.guild.id)
            if user_data["coins"] < to_pay:
                return await interaction.followup.send("Kh√¥ng ƒë·ªß coin.", ephemeral=True)
            await db.update_coins(interaction.user.id, interaction.guild.id, -to_pay)
            p_state["current_bet"] += to_pay
            if action == "raise":
                self.current_bet_to_match = p_state["current_bet"]

        if await self.next_turn():
            for c in self.children:
                c.disabled = True
            await self.message.edit(embed=self.create_game_embed(), view=self)
            await asyncio.sleep(2.5)
            await self.showdown()
        else:
            await self.message.edit(embed=self.create_game_embed(), view=self)

    async def showdown(self):
        self.stop()
        dealer_score = score_hand(self.dealer_hand)
        pot = sum(s['current_bet'] for s in self.player_states.values())
        embed = self.create_game_embed(show_all_hands=True)
        embed.title = "üÉè K·∫æT QU·∫¢ üÉè"
        embed.description = f"T·ªïng ti·ªÅn c∆∞·ª£c: **{pot:,}** coin"
        winners, best_score = [], -1
        playing_players = [
            p for p in self.players if self.player_states[p.id]["status"] != "folded"]
        if len(playing_players) == 1:
            winners = playing_players
        else:
            for p in playing_players:
                p_score = score_hand(self.player_states[p.id]["hand"])
                if p_score >= dealer_score:
                    if p_score > best_score:
                        best_score, winners = p_score, [p]
                    elif p_score == best_score:
                        winners.append(p)

        result_text = "Nh√† c√°i th·∫Øng!" if not winners else "\n".join(
            [f"üéâ {w.mention} th·∫Øng **{pot//len(winners):,}** coin!" for w in winners])
        if winners:
            for w in winners:
                await db.update_coins(w.id, w.guild.id, pot // len(winners))

        embed.add_field(name="--- K·∫æT QU·∫¢ ---",
                        value=result_text, inline=False)
        bet_amount = self.original_ctx.kwargs.get(
            'bet_amount', self.player_states[self.players[0].id]['current_bet'])
        new_lobby_view = CreateNewLobbyView(
            self.cog, self.original_ctx, 'poker', bet_amount)
        await self.message.edit(embed=embed, view=new_lobby_view)

    @discord.ui.button(label="üëÅÔ∏è Xem B√†i", style=discord.ButtonStyle.secondary, row=1, custom_id="view_hand_button")
    async def view_hand(self, interaction: discord.Interaction, button: discord.ui.Button):
        p_state = self.player_states.get(interaction.user.id)
        if not p_state or p_state["status"] == "folded":
            return await interaction.response.send_message("L·ªói.", ephemeral=True)
        hand, score = p_state["hand"], score_hand(p_state["hand"])
        await interaction.response.send_message(f"B√†i c·ªßa b·∫°n: {' '.join([f'`{r}{s}`' for r, s in hand])} ({score} n√∫t).", ephemeral=True)

    @discord.ui.button(label="Theo", style=discord.ButtonStyle.green)
    async def call(self, interaction: discord.Interaction,
                   button: discord.ui.Button): await self.handle_action(interaction, "call")

    @discord.ui.button(label="T·ªë", style=discord.ButtonStyle.primary)
    async def raise_btn(self, interaction: discord.Interaction,
                        button: discord.ui.Button): await interaction.response.send_modal(PokerRaiseModal(self))

    @discord.ui.button(label="B·ªè B√†i", style=discord.ButtonStyle.red)
    async def fold(self, interaction: discord.Interaction,
                   button: discord.ui.Button): await self.handle_action(interaction, "fold")


class PokerLobbyView(discord.ui.View):
    def __init__(self, host: discord.Member, bet_amount: int, cog):
        super().__init__(timeout=120.0)
        self.host, self.bet_amount, self.cog = host, bet_amount, cog
        self.players = {host}
        self.message = None
        self.original_ctx = None

    def create_embed(self) -> discord.Embed:
        embed = discord.Embed(
            title=f"üÉè B√†n B√†i 3 L√° - C∆∞·ª£c S√†n {self.bet_amount:,} Coin üÉè", description="Nh·∫•n n√∫t **Tham Gia**!", color=0x006400)
        embed.add_field(name=f"Ng∆∞·ªùi ch∆°i ({len(self.players)})", value="\n".join(
            [p.mention for p in self.players]) or "Ch∆∞a c√≥ ai.")
        embed.set_footer(
            text=f"Ch·ªß x·ªã ({self.host.display_name}) c√≥ th·ªÉ b·∫Øt ƒë·∫ßu.")
        return embed

    @discord.ui.button(label="Tham Gia", emoji="üéüÔ∏è")
    async def join(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user in self.players:
            return await interaction.response.send_message("B·∫°n ƒë√£ tham gia.", ephemeral=True)
        user_data = await db.get_or_create_user(interaction.user.id, interaction.guild.id)
        if user_data['coins'] < self.bet_amount:
            return await interaction.response.send_message(f"Kh√¥ng ƒë·ªß **{self.bet_amount:,}** coin.", ephemeral=True)
        self.players.add(interaction.user)
        await interaction.response.edit_message(embed=self.create_embed())

    @discord.ui.button(label="B·∫Øt ƒê·∫ßu", emoji="‚ñ∂Ô∏è")
    async def start(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.host.id:
            return await interaction.response.send_message("Ch·ªâ ch·ªß x·ªã c√≥ th·ªÉ b·∫Øt ƒë·∫ßu.", ephemeral=True)
        if len(self.players) < 1:
            return await interaction.response.send_message("C·∫ßn √≠t nh·∫•t 1 ng∆∞·ªùi.", ephemeral=True)
        await interaction.response.defer()
        self.stop()
        for p in self.players:
            await db.update_coins(p.id, interaction.guild.id, -self.bet_amount)
        game_view = PokerGameView(
            list(self.players), self.bet_amount, self.message, self.cog, self.original_ctx)

        def format_hand(h): return " ".join([f"`{r}{s}`" for r, s in h])
        for p in game_view.players:
            p_state = game_view.player_states[p.id]
            hand, score = p_state["hand"], score_hand(p_state["hand"])
            try:
                await p.send(f"B√†i c·ªßa b·∫°n: {format_hand(hand)} ({score} n√∫t).")
            except:
                pass
        await self.message.edit(embed=game_view.create_game_embed(), view=game_view)

    @discord.ui.button(label="H·ªßy", emoji="‚úñÔ∏è")
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.host.id:
            return await interaction.response.send_message("Ch·ªâ ch·ªß x·ªã c√≥ th·ªÉ h·ªßy.", ephemeral=True)
        embed = self.create_embed()
        embed.title = "[ƒê√É H·ª¶Y] " + embed.title
        embed.description = "B√†n c∆∞·ª£c ƒë√£ h·ªßy."
        embed.color = discord.Color.dark_grey()
        for c in self.children:
            c.disabled = True
        await interaction.response.edit_message(embed=embed, view=None)
        self.stop()

# =============================================================
# COG CH√çNH
# =============================================================


class Fun(commands.Cog):
    """üé≤ C√°c l·ªánh gi·∫£i tr√≠ v√† mini-game vui v·∫ª."""
    COG_EMOJI = "üé≤"
    def __init__(self, bot): self.bot = bot

    async def cog_check(self, ctx: commands.Context):
        config = await db.get_or_create_config(ctx.guild.id)
        if (debtor_role_id := config.get('debtor_role_id')) and (debtor_role := ctx.guild.get_role(debtor_role_id)) and debtor_role in ctx.author.roles:
            await ctx.send("B·∫°n ƒëang trong t√¨nh tr·∫°ng v·ª° n·ª£!", ephemeral=True, delete_after=10)
            return False
        return True

    # cogs/fun.py -> class Fun

    @commands.hybrid_command(name="coin", description="Tung ƒë·ªìng xu S·∫•p/Ng·ª≠a, c√≥ th·ªÉ c∆∞·ª£c coin.")
    @app_commands.rename(bet="ti·ªÅn_c∆∞·ª£c")
    async def coin(self, ctx: commands.Context, bet: int = 0):
        if bet > 0:
            user_data = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
            if user_data['coins'] < bet:
                return await ctx.send(f"B·∫°n kh√¥ng ƒë·ªß **{bet:,}** coin.", ephemeral=True)

            is_win = random.choice([True, False])
            if is_win:
                await db.update_coins(ctx.author.id, ctx.guild.id, bet)
                embed = discord.Embed(
                    title="üéâ B·∫†N TH·∫ÆNG! üéâ", description=f"B·∫°n th·∫Øng **{bet:,}** coin.", color=discord.Color.gold())
            else:
                await db.update_coins(ctx.author.id, ctx.guild.id, -bet)
                embed = discord.Embed(
                    title="üíî B·∫†N THUA! üíî", description=f"B·∫°n m·∫•t **{bet:,}** coin.", color=discord.Color.dark_grey())

            # <<< S·ª¨A L·ªñI T·∫†I ƒê√ÇY: TH√äM L·∫†I SET_AUTHOR >>>
            embed.set_author(
                name=f"V√°n c∆∞·ª£c c·ªßa {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)

            new_balance = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
            embed.set_footer(text=f"S·ªë d∆∞ m·ªõi: {new_balance['coins']:,} coin")
            view = PlayAgainView(self, ctx, 'coin', 'C∆∞·ª£c L·∫°i Tung ƒê·ªìng Xu')
            await ctx.send(embed=embed, view=view)
        else:
            result = 'S·∫•p' if random.random() > 0.5 else 'Ng·ª≠a'
            embed = discord.Embed(
                title=f"ü™ô K·∫øt qu·∫£: {result}!", color=discord.Color.blue())

            # <<< TH√äM C·∫¢ V√ÄO ƒê√ÇY ƒê·ªÇ ƒê·ªíNG B·ªò >>>
            embed.set_author(
                name=f"L∆∞·ª£t tung c·ªßa {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)

            view = CoinNoBetView(self, ctx)
            await ctx.send(embed=embed, view=view)

    @commands.hybrid_command(name="flip", description="T·∫°o b√†n c∆∞·ª£c tung ƒë·ªìng xu cho nhi·ªÅu ng∆∞·ªùi.")
    @app_commands.rename(bet_amount="s·ªë_ti·ªÅn_c∆∞·ª£c")
    async def flip(self, ctx: commands.Context, bet_amount: int):
        if bet_amount <= 0:
            return await ctx.send("Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        host_data = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
        if host_data['coins'] < bet_amount:
            return await ctx.send(f"B·∫°n kh√¥ng ƒë·ªß **{bet_amount:,}** coin.", ephemeral=True)
        lobby_view = CoinflipLobbyView(ctx.author, bet_amount, self)
        lobby_view.original_ctx = ctx
        lobby_view.message = await ctx.send(embed=lobby_view.create_embed(), view=lobby_view)

    @commands.hybrid_command(name="roll", description="Tung x√∫c x·∫Øc (m·∫∑c ƒë·ªãnh 6 m·∫∑t).")
    @app_commands.rename(sides="s·ªë_m·∫∑t")
    async def roll(self, ctx: commands.Context, sides: int = 6):
        if sides <= 1:
            return await ctx.send("S·ªë m·∫∑t ph·∫£i l·ªõn h∆°n 1.", ephemeral=True)
        await ctx.send(embed=discord.Embed(description=f"üé≤ B·∫°n ƒë√£ tung ra s·ªë **{random.randint(1, sides)}**.", color=0x992D22))

    @commands.hybrid_command(name="rps", aliases=['rockpaperscissors'], description="Th√°ch ƒë·∫•u O·∫≥n t√π t√¨.")
    @app_commands.rename(member="ƒë·ªëi_th·ªß", bet_amount="s·ªë_ti·ªÅn_c∆∞·ª£c")
    async def rockpaperscissors(self, ctx: commands.Context, member: discord.Member, bet_amount: int = 0):
        if member == ctx.author or member.bot:
            return await ctx.send("Kh√¥ng th·ªÉ th√°ch ƒë·∫•u v·ªõi ch√≠nh m√¨nh ho·∫∑c bot.", ephemeral=True)
        if bet_amount < 0:
            return await ctx.send("Ti·ªÅn c∆∞·ª£c kh√¥ng th·ªÉ √¢m.", ephemeral=True)
        if bet_amount > 0:
            p1_data = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
            p2_data = await db.get_or_create_user(member.id, ctx.guild.id)
            if p1_data['coins'] < bet_amount or p2_data['coins'] < bet_amount:
                return await ctx.send("M·ªôt trong hai ng∆∞·ªùi kh√¥ng ƒë·ªß ti·ªÅn c∆∞·ª£c.", ephemeral=True)

        invite_view = ConfirmationView(member)
        invite_msg = await ctx.send(f"{member.mention}, b·∫°n c√≥ ch·∫•p nh·∫≠n l·ªùi th√°ch ƒë·∫•u t·ª´ {ctx.author.mention}{f' (c∆∞·ª£c {bet_amount:,} coin)' if bet_amount > 0 else ''}?", view=invite_view)

        await invite_view.wait()

        if invite_view.confirmed:
            await invite_msg.delete()
            game_view = RPSGameView(ctx.author, member)
            await ctx.send(embed=discord.Embed(title="‚öîÔ∏è Tr·∫≠n ƒê·∫•u B·∫Øt ƒê·∫ßu! ‚öîÔ∏è", description=f"{ctx.author.mention} vs {member.mention}", color=discord.Color.yellow()), view=game_view)

            await game_view.wait()

            winner, p1c, p2c = game_view.winner, game_view.choices.get(
                ctx.author.id), game_view.choices.get(member.id)

            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p m·ªôt ng∆∞·ªùi kh√¥ng ch·ªçn
            if not p1c or not p2c:
                # N·∫øu game h·∫øt h·∫°n m√† c√≥ ng∆∞·ªùi ch∆∞a ch·ªçn, kh√¥ng c·∫ßn l√†m g√¨ th√™m, view t·ª± stop
                return

            embed = discord.Embed(title="K·∫øt Qu·∫£ O·∫≥n T√π T√¨")
            embed.add_field(name=ctx.author.display_name,
                            value=game_view.CHOICE_EMOJIS.get(p1c, "‚ùì"))
            embed.add_field(name=member.display_name,
                            value=game_view.CHOICE_EMOJIS.get(p2c, "‚ùì"))

            if winner == "h√≤a":
                embed.description = "H√≤a nhau!"
            elif winner:
                loser = member if winner == ctx.author else ctx.author
                embed.description = f"**{winner.display_name}** ƒë√£ chi·∫øn th·∫Øng! üëë"
                if bet_amount > 0:
                    await db.update_coins(winner.id, ctx.guild.id, bet_amount)
                    await db.update_coins(loser.id, ctx.guild.id, -bet_amount)
                    embed.description += f"\n**{winner.mention}** th·∫Øng **{bet_amount:,}** coin!"
                await db.update_quest_progress(winner.id, ctx.guild.id, 'RPS_WIN')

            # =============================================================
            # <<< PH·∫¶N C·∫¨P NH·∫¨T CH√çNH N·∫∞M ·ªû ƒê√ÇY >>>
            # T·∫°o view m·ªõi v·ªõi t√πy ch·ªçn th√°ch ƒë·∫•u l·∫°i thay cho view c≈© ch·ªâ c√≥ n√∫t ƒë√≥ng
            replay_view = RPSReplayView(self, ctx, member, bet_amount)
            await ctx.send(embed=embed, view=replay_view)
            # =============================================================

        elif invite_view.confirmed is False:
            await invite_msg.edit(content=f"{member.display_name} ƒë√£ t·ª´ ch·ªëi.", view=None, delete_after=10)
        else:  # Timeout
            await invite_msg.edit(content="L·ªùi th√°ch ƒë·∫•u ƒë√£ h·∫øt h·∫°n.", view=None, delete_after=10)

    @commands.hybrid_command(name="duangua", description="T·∫°o m·ªôt cu·ªôc ƒëua ng·ª±a ƒë·ªÉ m·ªçi ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c.")
    async def horse_race(self, ctx: commands.Context):
        view = HorseRacingLobbyView(ctx.author, self)
        view.original_ctx = ctx
        view.message = await ctx.send(embed=view.create_lobby_embed(), view=view)

    async def start_the_race(self, view: HorseRacingLobbyView):
        [setattr(i, 'disabled', True) for i in view.children]
        total_pot = sum(b['amount']
                        for bets in view.bets.values() for b in bets)
        for u, bets in view.bets.items():
            await db.update_coins(u.id, view.host.guild.id, -sum(b['amount'] for b in bets))
        race_len = 20
        embed = discord.Embed(title="üèá CU·ªòC ƒêUA B·∫ÆT ƒê·∫¶U! üèá",
                              color=discord.Color.blue())
        bet_info = "\n".join(
            [f"**{u.display_name}:** {', '.join([f'{view.horses[b['horse']]['emoji']} ({b['amount']:,})' for b in bets])}" for u, bets in view.bets.items()])
        if bet_info:
            embed.add_field(name="--- C∆∞·ª£c Th·ªß ---", value=bet_info)
        embed.description = "\n".join(
            [f"`{'üèÅ' + '-' * race_len}` {h['emoji']}" for h in view.horses])
        await view.message.edit(embed=embed, view=view)
        await asyncio.sleep(2)
        winner = None
        while winner is None:
            desc = ""
            for i, h in enumerate(view.horses):
                h["progress"] = min(
                    race_len, h["progress"] + random.randint(1, 3))
                desc += f"`{'üèÅ' + '-' * (race_len - h['progress']) + h['emoji'] + '-' * h['progress']}`\n"
                if h["progress"] >= race_len and winner is None:
                    winner = i
            embed.description = desc
            await view.message.edit(embed=embed)
            if winner is not None:
                break
            await asyncio.sleep(2)
        winner_horse = view.horses[winner]
        embed.title = f"üèÅ K·∫æT TH√öC! {winner_horse['emoji']} CHI·∫æN TH·∫ÆNG! üèÅ"
        winning_bets = [{"user": u, "amount": b["amount"]}
                        for u, bets in view.bets.items() for b in bets if b["horse"] == winner]
        result_text = f"Kh√¥ng ai c∆∞·ª£c cho {winner_horse['emoji']}. Nh√† c√°i h∆∞·ªüng **{total_pot:,}** coin!"
        if winning_bets:
            payout_per_coin = total_pot / \
                sum(b["amount"] for b in winning_bets) if sum(b["amount"]
                                                              for b in winning_bets) > 0 else 0
            payouts = {}
            for bet in winning_bets:
                payouts[bet["user"]] = payouts.get(
                    bet["user"], 0) + int(bet["amount"] * payout_per_coin)
            for u, p in payouts.items():
                await db.update_coins(u.id, view.host.guild.id, p)
            result_text = "\n".join(
                [f"{u.mention} th·∫Øng **{p:,}** coin!" for u, p in payouts.items()])
        embed.add_field(name="--- K·∫æT QU·∫¢ ---",
                        value=result_text, inline=False)
        new_lobby_view = CreateNewLobbyView(self, view.original_ctx, 'duangua')
        await view.message.edit(embed=embed, view=new_lobby_view)

    @commands.hybrid_command(name="taixiu", aliases=['tx'], description="T·∫°o b√†n c∆∞·ª£c T√†i X·ªâu.")
    @app_commands.rename(bet_amount="s·ªë_ti·ªÅn_c∆∞·ª£c")
    async def tai_xiu_table(self, ctx: commands.Context, bet_amount: int):
        if bet_amount <= 0:
            return await ctx.send("Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        user_data = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
        if user_data['coins'] < bet_amount:
            return await ctx.send(f"Kh√¥ng ƒë·ªß **{bet_amount:,}** coin.", ephemeral=True)
        view = TaixiuLobbyView(ctx.author, bet_amount, self)
        view.original_ctx = ctx
        view.message = await ctx.send(embed=view.create_embed(), view=view)

    @commands.hybrid_command(name="poker", aliases=['xito'], description="T·∫°o b√†n ch∆°i Poker 3 l√°.")
    @app_commands.rename(bet_amount="s·ªë_ti·ªÅn_c∆∞·ª£c")
    async def poker_table(self, ctx: commands.Context, bet_amount: int):
        if bet_amount <= 0:
            return await ctx.send("Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        user_data = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
        if user_data['coins'] < bet_amount:
            return await ctx.send(f"Kh√¥ng ƒë·ªß **{bet_amount:,}** coin.", ephemeral=True)
        view = PokerLobbyView(ctx.author, bet_amount, self)
        view.original_ctx = ctx
        view.message = await ctx.send(embed=view.create_embed(), view=view)

    @commands.hybrid_command(name="slots", aliases=['sl'], description="Ch∆°i m√°y k√©o may m·∫Øn.")
    @app_commands.rename(bet="ti·ªÅn_c∆∞·ª£c")
    async def slots(self, ctx: commands.Context, bet: int):
        if bet <= 0:
            return await ctx.send("Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        user_data = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
        if user_data['coins'] < bet:
            return await ctx.send(f"B·∫°n kh√¥ng ƒë·ªß **{bet:,}** coin.", ephemeral=True)
        await db.update_coins(ctx.author.id, ctx.guild.id, -bet)
        reels = {"üçí": 40, "üçä": 30, "üçì": 20, "üí∞": 10, "üíé": 5, "7Ô∏è‚É£": 2}
        results = random.choices(
            list(reels.keys()), weights=list(reels.values()), k=3)
        slot_msg = await ctx.send(f"**[ ‚ùì | ‚ùì | ‚ùì ]**\nƒêang quay...")
        for i in range(3):
            await asyncio.sleep(1)
            content = f"**[ {' | '.join(results[:i+1])}{' | ‚ùì ' * (2-i)}]**".strip()
            await slot_msg.edit(content=content)
        payout, win_msg, title, color = 0, "", "üíî B·∫†N THUA! üíî", discord.Color.dark_grey()
        if results[0] == results[1] == results[2]:
            title, color = "üéâ B·∫†N TH·∫ÆNG! üéâ", discord.Color.gold()
            payout = bet * {'7Ô∏è‚É£': 100, 'üíé': 50, 'üí∞': 20,
                            'üçì': 10, 'üçä': 5, 'üçí': 3}.get(results[0], 0)
            win_msg = "üéâ JACKPOT! üéâ" if results[0] == "7Ô∏è‚É£" else "Th·∫Øng l·ªõn!"
        elif results.count("üçí") == 2:
            title, color = "üéâ B·∫†N TH·∫ÆNG! üéâ", discord.Color.gold()
            payout, win_msg = int(bet * 1.5), "Hai qu·∫£ cherry!"
        embed = discord.Embed(
            title=title, color=color, description=f"**[ {results[0]} | {results[1]} | {results[2]} ]**\n*{win_msg}*")
        embed.add_field(name="Ti·ªÅn c∆∞·ª£c", value=f"`{bet:,}` coin", inline=True)
        if payout > 0:
            await db.update_coins(ctx.author.id, ctx.guild.id, payout)
            embed.add_field(name="Ti·ªÅn th·∫Øng",
                            value=f"`{payout:,}` coin", inline=True)
        else:
            embed.add_field(name="Ti·ªÅn thua",
                            value=f"`{bet:,}` coin", inline=True)
        new_balance = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
        embed.add_field(
            name="S·ªë d∆∞ m·ªõi", value=f"**{new_balance['coins']:,}** coin", inline=False)
        embed.set_author(
            name=f"V√°n c∆∞·ª£c c·ªßa {ctx.author.display_name}", icon_url=ctx.author.display_avatar.url)
        view = PlayAgainView(self, ctx, 'slots', 'C∆∞·ª£c L·∫°i Slots')
        await slot_msg.edit(content=None, embed=embed, view=view)


async def setup(bot):
    await bot.add_cog(Fun(bot))
