# cogs/loan.py
import discord
from discord.ext import commands
import datetime
import database as db
from .utils import checks
from discord import app_commands

# L·∫•y ConfirmationView t·ª´ cogs/fun.py
# ƒêi·ªÅu n√†y gi√∫p tr√°nh ƒë·ªãnh nghƒ©a l·∫°i class v√† gi·ªØ code DRY (Don't Repeat Yourself)
try:
    from .fun import ConfirmationView
except (ImportError, SystemError):
    # Fallback n·∫øu kh√¥ng th·ªÉ import tr·ª±c ti·∫øp (v√≠ d·ª• khi ch·∫°y test ri√™ng file)
    from fun import ConfirmationView


LOAN_CONFIG = {
    "MAX_LOAN": 5000,
    "INTEREST_RATE": 0.20,  # 20% l√£i su·∫•t
    "REPAYMENT_DAYS": 3
}


class LoanSystem(commands.Cog):
    """üí∏ H·ªá th·ªëng vay v√† tr·∫£ n·ª£."""
    COG_EMOJI = "üí∏"

    def __init__(self, bot):
        self.bot = bot

    async def cog_check(self, ctx: commands.Context):
        """Ki·ªÉm tra chung cho t·∫•t c·∫£ c√°c l·ªánh trong Cog n√†y."""
        config = await db.get_or_create_config(ctx.guild.id)
        if debtor_role_id := config.get('debtor_role_id'):
            if debtor_role := ctx.guild.get_role(debtor_role_id):
                # Cho ph√©p ng∆∞·ªùi n·ª£ d√πng l·ªánh trano
                if debtor_role in ctx.author.roles and ctx.command.name != 'trano':
                    await ctx.send("B·∫°n ƒëang trong t√¨nh tr·∫°ng v·ª° n·ª£! D√πng `/trano` ƒë·ªÉ tr·∫£ n·ª£ tr∆∞·ªõc khi d√πng c√°c l·ªánh kh√°c.", delete_after=10, ephemeral=True)
                    return False
        return True

    @commands.hybrid_command(name="vay", description=f"Vay ti·ªÅn t·ª´ ng√¢n h√†ng (t·ªëi ƒëa {LOAN_CONFIG['MAX_LOAN']:,} coin).")
    @app_commands.rename(amount="s·ªë_ti·ªÅn_vay")
    async def vay(self, ctx: commands.Context, amount: int):
        if amount <= 0:
            return await ctx.send("S·ªë ti·ªÅn vay ph·∫£i l·ªõn h∆°n 0.", delete_after=10, ephemeral=True)
        if amount > LOAN_CONFIG["MAX_LOAN"]:
            return await ctx.send(f"B·∫°n ch·ªâ c√≥ th·ªÉ vay t·ªëi ƒëa **{LOAN_CONFIG['MAX_LOAN']:,}** coin.", delete_after=10, ephemeral=True)

        if await db.get_loan(ctx.author.id, ctx.guild.id):
            return await ctx.send("B·∫°n ƒëang c√≥ m·ªôt kho·∫£n n·ª£ ch∆∞a tr·∫£. D√πng `/trano` ƒë·ªÉ tr·∫£ n·ª£ tr∆∞·ªõc.", delete_after=10, ephemeral=True)

        repayment_amount = int(amount * (1 + LOAN_CONFIG["INTEREST_RATE"]))
        due_date = datetime.datetime.now(
            datetime.timezone.utc) + datetime.timedelta(days=LOAN_CONFIG["REPAYMENT_DAYS"])

        confirm_embed = discord.Embed(
            title="X√°c Nh·∫≠n Kho·∫£n Vay", color=discord.Color.yellow())
        confirm_embed.add_field(
            name="S·ªë ti·ªÅn vay", value=f"**{amount:,}** coin")
        confirm_embed.add_field(name="S·ªë ti·ªÅn ph·∫£i tr·∫£",
                                value=f"**{repayment_amount:,}** coin")
        confirm_embed.add_field(
            name="H·∫°n tr·∫£", value=f"<t:{int(due_date.timestamp())}:F> (<t:{int(due_date.timestamp())}:R>)")

        view = ConfirmationView(ctx.author)
        msg = await ctx.send(embed=confirm_embed, view=view)

        await view.wait()
        if view.confirmed:
            await msg.edit(content=f"‚úÖ Giao d·ªãch th√†nh c√¥ng! B·∫°n ƒë√£ vay **{amount:,}** coin.", embed=None, view=None)

            await db.update_coins(ctx.author.id, ctx.guild.id, amount)
            await db.create_loan(ctx.author.id, ctx.guild.id,
                                 repayment_amount, due_date.isoformat())

            await db.update_quest_progress(ctx.author.id, ctx.guild.id, 'LOAN_TAKEN')

            unlocked_loan = await db.update_achievement_progress(
                ctx.author.id, ctx.guild.id, 'LOAN_TAKEN')
            if unlocked_loan:
                for ach in unlocked_loan:
                    await ctx.channel.send(f"üèÜ {ctx.author.mention} v·ª´a m·ªü kh√≥a th√†nh t·ª±u m·ªõi: **{ach['name']}**! (+{ach['reward_coin']:,} coin, +{ach['reward_xp']} XP)", delete_after=30)

        elif view.confirmed is False:
            await msg.edit(content="ƒê√£ h·ªßy giao d·ªãch vay.", embed=None, view=None, delete_after=10)
        else:  # Timeout
            try:
                await msg.delete()
            except discord.NotFound:
                pass

    @commands.hybrid_command(name="trano", description="Tr·∫£ n·ª£ kho·∫£n vay hi·ªán t·∫°i c·ªßa b·∫°n.")
    async def trano(self, ctx: commands.Context):
        loan = await db.get_loan(ctx.author.id, ctx.guild.id)
        if not loan:
            return await ctx.send("B·∫°n kh√¥ng c√≥ kho·∫£n n·ª£ n√†o.", delete_after=10, ephemeral=True)

        user_data = await db.get_or_create_user(ctx.author.id, ctx.guild.id)
        repayment_amount = loan['repayment_amount']

        if user_data['coins'] < repayment_amount:
            return await ctx.send(f"B·∫°n kh√¥ng ƒë·ªß **{repayment_amount:,}** coin ƒë·ªÉ tr·∫£ n·ª£.", delete_after=10, ephemeral=True)

        await db.update_coins(ctx.author.id, ctx.guild.id, -repayment_amount)
        await db.delete_loan(ctx.author.id, ctx.guild.id)

        # C·∫≠p nh·∫≠t th√†nh t·ª±u ti√™u ti·ªÅn khi tr·∫£ n·ª£
        unlocked_spend = await db.update_achievement_progress(
            ctx.author.id, ctx.guild.id, 'COIN_SPEND', value_to_add=repayment_amount)
        if unlocked_spend:
            for ach in unlocked_spend:
                await ctx.channel.send(f"üèÜ {ctx.author.mention} v·ª´a m·ªü kh√≥a th√†nh t·ª±u m·ªõi: **{ach['name']}**! (+{ach['reward_coin']:,} coin, +{ach['reward_xp']} XP)", delete_after=30)

        config = await db.get_or_create_config(ctx.guild.id)
        if debtor_role_id := config.get('debtor_role_id'):
            if debtor_role := ctx.guild.get_role(debtor_role_id):
                if debtor_role in ctx.author.roles:
                    try:
                        await ctx.author.remove_roles(debtor_role, reason="ƒê√£ tr·∫£ h·∫øt n·ª£")
                        await ctx.send(f"‚úÖ B·∫°n ƒë√£ tr·∫£ n·ª£ th√†nh c√¥ng kho·∫£n vay **{repayment_amount:,}** coin v√† ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch v·ª° n·ª£!")
                        return
                    except discord.Forbidden:
                        pass

        await ctx.send(f"‚úÖ B·∫°n ƒë√£ tr·∫£ n·ª£ th√†nh c√¥ng kho·∫£n vay **{repayment_amount:,}** coin!")

    @commands.hybrid_command(name="no", description="Ki·ªÉm tra t√¨nh tr·∫°ng n·ª£ c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c.")
    @app_commands.rename(member="th√†nh_vi√™n")
    async def no(self, ctx: commands.Context, member: discord.Member = None):
        target = member or ctx.author
        loan = await db.get_loan(target.id, ctx.guild.id)

        if not loan:
            message = "Ch√∫c m·ª´ng! B·∫°n kh√¥ng c√≥ n·ª£ n·∫ßn g√¨ c·∫£." if target == ctx.author else f"{target.display_name} kh√¥ng c√≥ kho·∫£n n·ª£ n√†o."
            return await ctx.send(message, ephemeral=True)

        embed = discord.Embed(
            title=f"T√¨nh Tr·∫°ng N·ª£ C·ªßa {target.display_name}", color=discord.Color.red())
        embed.set_thumbnail(url=target.display_avatar.url)
        embed.add_field(name="S·ªë ti·ªÅn ph·∫£i tr·∫£",
                        value=f"**{loan['repayment_amount']:,}** coin")
        due_date_ts = int(datetime.datetime.fromisoformat(
            loan['due_date']).timestamp())
        embed.add_field(
            name="H·∫°n tr·∫£", value=f"<t:{due_date_ts}:F> (<t:{due_date_ts}:R>)")
        await ctx.send(embed=embed)


async def setup(bot):
    await bot.add_cog(LoanSystem(bot))
