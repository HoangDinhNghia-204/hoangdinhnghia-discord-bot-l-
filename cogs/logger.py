# cogs/logger.py
import discord
from discord.ext import commands
import datetime
import database as db
import asyncio


class Logger(commands.Cog):
    """Ghi l·∫°i c√°c ho·∫°t ƒë·ªông quan tr·ªçng trong server."""
    COG_EMOJI = "üìù"  # Th√™m emoji cho ƒë·∫πp trong l·ªánh /help

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # D√πng cache ƒë·ªÉ tr√°nh query database li√™n t·ª•c khi kh√¥ng c·∫ßn
        self.log_channel_cache = {}
        # Cache tin nh·∫Øn ƒë·ªÉ l·∫•y n·ªôi dung khi b·ªã x√≥a
        self.message_cache = {}

    async def get_log_channel(self, guild_id: int) -> discord.TextChannel | None:
        """H√†m helper ƒë·ªÉ l·∫•y k√™nh log, c√≥ s·ª≠ d·ª•ng cache ƒë·ªÉ t·ªëi ∆∞u."""
        if guild_id in self.log_channel_cache:
            channel_id = self.log_channel_cache[guild_id]
            if channel_id:
                return self.bot.get_channel(channel_id)
            return None

        config = await db.get_or_create_config(guild_id)
        channel_id = config.get('log_channel_id')
        self.log_channel_cache[guild_id] = channel_id  # C·∫≠p nh·∫≠t cache

        if channel_id:
            return self.bot.get_channel(channel_id)
        return None

    # --- S·ª∞ KI·ªÜN LOG TIN NH·∫ÆN ---

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """L∆∞u tin nh·∫Øn v√† t·ªáp ƒë√≠nh k√®m v√†o cache ƒë·ªÉ c√≥ th·ªÉ l·∫•y l·∫°i khi b·ªã x√≥a."""
        if not message.author.bot and message.guild:
            # L·∫•y danh s√°ch URL c·ªßa t·∫•t c·∫£ t·ªáp ƒë√≠nh k√®m
            attachment_urls = [att.url for att in message.attachments]

            self.message_cache[message.id] = {
                'content': message.content,
                'author': message.author,
                'channel': message.channel,
                'created_at': message.created_at,
                'attachment_urls': attachment_urls  # L∆∞u danh s√°ch URL v√†o cache
            }
            # Gi·ªØ cache kh√¥ng qu√° l·ªõn ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
            if len(self.message_cache) > 200:
                oldest_keys = list(self.message_cache.keys())[:50]
                for key in oldest_keys:
                    del self.message_cache[key]

    @commands.Cog.listener()
    async def on_message_delete(self, message: discord.Message):
        if not message.guild or message.author.bot:
            return

        log_channel = await self.get_log_channel(message.guild.id)
        if not log_channel:
            return

        await asyncio.sleep(1.5)

        deleter = None
        try:
            async for entry in message.guild.audit_logs(limit=5, action=discord.AuditLogAction.message_delete):
                if entry.extra.channel.id == message.channel.id and entry.target.id == message.author.id:
                    if (datetime.datetime.now(datetime.timezone.utc) - entry.created_at).total_seconds() < 5:
                        deleter = entry.user
                        break
        except discord.Forbidden:
            pass

        cached_message = self.message_cache.pop(message.id, None)
        author = message.author
        content = cached_message.get('content') if cached_message else None
        attachment_urls = cached_message.get(
            'attachment_urls', []) if cached_message else []

        action_text = ""
        if deleter and deleter.id != author.id:
            action_text = f"b·ªã x√≥a b·ªüi **{deleter.mention}**."
        else:
            action_text = f"do **ch√≠nh h·ªç** x√≥a."

        embed = discord.Embed(
            description=f"**Tin nh·∫Øn c·ªßa {author.mention} trong {message.channel.mention} {action_text}**",
            color=discord.Color.orange(),
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        embed.set_author(name=str(author), icon_url=author.display_avatar.url)

        # --- Ph·∫ßn Logic Hi·ªÉn Th·ªã M·ªõi ---
        has_content_to_log = False
        if content:
            embed.add_field(name="N·ªôi dung vƒÉn b·∫£n",
                            value=f"```{content[:1020]}```", inline=False)
            has_content_to_log = True

        if attachment_urls:
            # Hi·ªÉn th·ªã h√¨nh ·∫£nh ƒë·∫ßu ti√™n trong embed
            embed.set_image(url=attachment_urls[0])

            # N·∫øu c√≥ nhi·ªÅu h∆°n 1 t·ªáp, li·ªát k√™ c√°c t·ªáp c√≤n l·∫°i
            if len(attachment_urls) > 1:
                other_files = "\n".join(
                    f"[Link t·ªáp {i+2}]({url})" for i, url in enumerate(attachment_urls[1:]))
                embed.add_field(name="C√°c t·ªáp ƒë√≠nh k√®m kh√°c",
                                value=other_files, inline=False)
            has_content_to_log = True

        if not has_content_to_log:
            embed.add_field(
                name="N·ªôi dung ƒë√£ x√≥a", value="*Kh√¥ng th·ªÉ truy xu·∫•t n·ªôi dung (tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i khi bot offline ho·∫∑c qu√° c≈©)*", inline=False)

        embed.set_footer(
            text=f"ID Ng∆∞·ªùi G·ª≠i: {author.id} | ID Tin Nh·∫Øn: {message.id}")

        try:
            await log_channel.send(embed=embed)
        except Exception as e:
            print(f"L·ªói khi g·ª≠i log tin nh·∫Øn b·ªã x√≥a: {e}")

    @commands.Cog.listener()
    async def on_message_edit(self, before: discord.Message, after: discord.Message):
        if before.author.bot or not before.guild or before.content == after.content:
            return

        log_channel = await self.get_log_channel(before.guild.id)
        if not log_channel:
            return

        embed = discord.Embed(
            description=f"**Tin nh·∫Øn ƒë∆∞·ª£c s·ª≠a trong {before.channel.mention}** [Nh·∫£y t·ªõi tin nh·∫Øn]({after.jump_url})",
            color=discord.Color.blue(),
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        embed.set_author(name=str(before.author),
                         icon_url=before.author.display_avatar.url)
        embed.add_field(name="Tr∆∞·ªõc khi s·ª≠a",
                        value=f"```{before.content[:1020]}```", inline=False)
        embed.add_field(name="Sau khi s·ª≠a",
                        value=f"```{after.content[:1020]}```", inline=False)
        embed.set_footer(
            text=f"ID Ng∆∞·ªùi G·ª≠i: {before.author.id} | ID Tin Nh·∫Øn: {before.id}")

        await log_channel.send(embed=embed)

    # --- S·ª∞ KI·ªÜN LOG TH√ÄNH VI√äN ---

    @commands.Cog.listener()
    async def on_member_update(self, before: discord.Member, after: discord.Member):
        log_channel = await self.get_log_channel(before.guild.id)
        if not log_channel:
            return

        # Log thay ƒë·ªïi nickname
        if before.display_name != after.display_name:
            embed = discord.Embed(
                description=f"**Nickname c·ªßa {before.mention} ƒë√£ thay ƒë·ªïi**",
                color=discord.Color.purple(),
                timestamp=datetime.datetime.now(datetime.timezone.utc)
            )
            embed.set_author(
                name=str(after), icon_url=after.display_avatar.url)
            embed.add_field(
                name="T√™n c≈©", value=before.display_name, inline=True)
            embed.add_field(
                name="T√™n m·ªõi", value=after.display_name, inline=True)
            embed.set_footer(text=f"User ID: {after.id}")
            await log_channel.send(embed=embed)

        # Log thay ƒë·ªïi vai tr√≤
        if before.roles != after.roles:
            added_roles = [r for r in after.roles if r not in before.roles]
            removed_roles = [r for r in before.roles if r not in after.roles]
            if added_roles or removed_roles:
                embed = discord.Embed(
                    description=f"**Vai tr√≤ c·ªßa {before.mention} ƒë√£ thay ƒë·ªïi**",
                    color=discord.Color.teal(),
                    timestamp=datetime.datetime.now(datetime.timezone.utc)
                )
                embed.set_author(
                    name=str(after), icon_url=after.display_avatar.url)
                if added_roles:
                    embed.add_field(name="‚úÖ Vai tr√≤ ƒë√£ th√™m", value=", ".join(
                        [r.mention for r in added_roles]), inline=False)
                if removed_roles:
                    embed.add_field(name="‚ùå Vai tr√≤ ƒë√£ x√≥a", value=", ".join(
                        [r.mention for r in removed_roles]), inline=False)
                embed.set_footer(text=f"User ID: {after.id}")
                await log_channel.send(embed=embed)

    # --- S·ª∞ KI·ªÜN LOG KICK/BAN/UNBAN ---

    # L∆∞u √Ω: on_member_remove ƒë√£ c√≥ trong cogs/general.py ƒë·ªÉ th√¥ng b√°o t·∫°m bi·ªát.
    # ƒê·ªÉ tr√°nh xung ƒë·ªôt, ch√∫ng ta c√≥ th·ªÉ ki·ªÉm tra log kick/ban ·ªü m·ªôt s·ª± ki·ªán kh√°c ho·∫∑c g·ªôp ch√∫ng l·∫°i.
    # Hi·ªán t·∫°i, c√°c l·ªánh kick/ban c·ªßa b·∫°n ƒë√£ t·ª± g·ª≠i embed, n√™n ph·∫ßn log n√†y s·∫Ω t·∫≠p trung v√†o h√†nh ƒë·ªông th·ª±c hi·ªán qua giao di·ªán Discord.

    @commands.Cog.listener()
    async def on_member_ban(self, guild: discord.Guild, user: discord.User | discord.Member):
        log_channel = await self.get_log_channel(guild.id)
        if not log_channel:
            return

        try:
            async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.ban):
                if entry.target == user:
                    moderator = entry.user
                    reason = entry.reason or "Kh√¥ng c√≥ l√Ω do."
                    embed = discord.Embed(
                        description=f"üî® **{user} (`{user.id}`) ƒë√£ b·ªã c·∫•m kh·ªèi server**",
                        color=discord.Color.dark_red(),
                        timestamp=entry.created_at
                    )
                    embed.set_author(name=str(moderator),
                                     icon_url=moderator.display_avatar.url)
                    embed.add_field(name="L√Ω do", value=reason, inline=False)
                    await log_channel.send(embed=embed)
                    return
        except discord.Forbidden:
            pass

    @commands.Cog.listener()
    async def on_member_unban(self, guild: discord.Guild, user: discord.User):
        log_channel = await self.get_log_channel(guild.id)
        if not log_channel:
            return

        try:
            async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.unban):
                if entry.target == user:
                    moderator = entry.user
                    reason = entry.reason or "Kh√¥ng c√≥ l√Ω do."
                    embed = discord.Embed(
                        description=f"‚ôªÔ∏è **{user} (`{user.id}`) ƒë√£ ƒë∆∞·ª£c g·ª° c·∫•m**",
                        color=discord.Color.green(),
                        timestamp=entry.created_at
                    )
                    embed.set_author(name=str(moderator),
                                     icon_url=moderator.display_avatar.url)
                    embed.add_field(name="L√Ω do", value=reason, inline=False)
                    await log_channel.send(embed=embed)
                    return
        except discord.Forbidden:
            pass


async def setup(bot):
    await bot.add_cog(Logger(bot))
