# cogs/quests.py
import discord
from discord.ext import commands
import database as db
import datetime

# --- PH√ÇN LO·∫†I NHI·ªÜM V·ª§ ---
QUEST_CATEGORIES = {
    "üí¨ Ho·∫°t ƒê·ªông Chung": ['CHAT', 'GIVE_COIN', 'CHECK_BALANCE'],
    # <--- TH√äM V√ÄO ƒê√ÇY
    "üé≤ Mini-game": ['RPS_WIN', 'FLIP_WIN', 'BLACKJACK_WIN'],
    "üí∞ Kinh T·∫ø & Giao D·ªãch": ['DAILY_COMMAND', 'COIN_SPEND', 'SHOP_BUY', 'BID_AUCTION', 'LOAN_TAKEN']
}


class QuestView(discord.ui.View):
    def __init__(self, author: discord.Member, quests: list, cog):
        super().__init__(timeout=180.0)
        self.author = author
        self.quests = quests
        self.cog = cog

        # S·∫Øp x·∫øp c√°c nhi·ªám v·ª• ƒë√£ ho√†n th√†nh l√™n tr∆∞·ªõc ƒë·ªÉ n√∫t b·∫•m g·ªçn g√†ng h∆°n
        sorted_quests = sorted(quests, key=lambda q: not q['is_completed'])
        for quest in sorted_quests:
            if quest['is_completed']:
                button = discord.ui.Button(
                    label=f"Nh·∫≠n th∆∞·ªüng '{quest['name']}'",
                    style=discord.ButtonStyle.green,
                    custom_id=quest['quest_id'],
                    emoji="üéÅ"
                )
                button.callback = self.claim_reward
                self.add_item(button)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i b·∫£ng nhi·ªám v·ª• c·ªßa b·∫°n!", ephemeral=True)
            return False
        return True

    async def claim_reward(self, interaction: discord.Interaction):
        quest_id = interaction.data['custom_id']

        # L·∫•y l·∫°i d·ªØ li·ªáu quest m·ªõi nh·∫•t t·ª´ DB ƒë·ªÉ tr√°nh l·ªói "double-claim"
        current_quests = await db.get_user_quests(self.author.id, self.author.guild.id)
        quest_to_claim = next(
            (q for q in current_quests if q['quest_id'] == quest_id and q['is_completed']), None)

        if not quest_to_claim:
            await interaction.response.send_message("Nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c nh·∫≠n th∆∞·ªüng.", ephemeral=True)
            # C·∫≠p nh·∫≠t l·∫°i giao di·ªán ƒë·ªÉ x√≥a n√∫t b·∫•m ƒë√£ d√πng
            await self.cog.send_quest_embed(interaction.message, self.author)
            return

        reward_coin = quest_to_claim['reward_coin']
        reward_xp = quest_to_claim['reward_xp']

        await db.update_coins(self.author.id, self.author.guild.id, reward_coin)
        await db.update_user_xp(self.author.id, self.author.guild.id, reward_xp)
        await db.claim_quest_reward(self.author.id, self.author.guild.id, quest_id)

        await interaction.response.send_message(f"üéâ B·∫°n ƒë√£ nh·∫≠n th√†nh c√¥ng **{reward_coin:,} coin** v√† **{reward_xp} XP** t·ª´ nhi·ªám v·ª• **'{quest_to_claim['name']}'**!", ephemeral=True)

        # C·∫≠p nh·∫≠t l·∫°i giao di·ªán sau khi nh·∫≠n th∆∞·ªüng
        if interaction.message:
            await self.cog.send_quest_embed(interaction.message, self.author)


class Quests(commands.Cog):
    """üìú H·ªá th·ªëng nhi·ªám v·ª• h√†ng ng√†y."""
    COG_EMOJI = "üìú"

    def __init__(self, bot):
        self.bot = bot

    async def send_quest_embed(self, message_or_ctx, member: discord.Member):
    # """H√†m helper ƒë·ªÉ t·∫°o v√† g·ª≠i/s·ª≠a embed nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p giao di·ªán."""
        user_quests = await db.get_user_quests(member.id, member.guild.id)

        embed = discord.Embed(
            title=f"üìú B·∫£ng Nhi·ªám V·ª• c·ªßa {member.display_name}", color=member.color or discord.Color.blue())
        embed.set_footer(
            text="Nhi·ªám v·ª• s·∫Ω ƒë∆∞·ª£c l√†m m·ªõi v√†o 8:00 s√°ng m·ªói ng√†y.")

        if not user_quests:
            embed.description = "B·∫°n ch∆∞a c√≥ nhi·ªám v·ª• n√†o. H√£y ch·ªù ƒë·∫øn ng√†y mai nh√©!"
        else:
            # S·∫Øp x·∫øp nhi·ªám v·ª• theo category
            categorized_quests = {category: []
                                for category in QUEST_CATEGORIES}
            other_quests = []

            for quest in user_quests:
                found_category = False
                for category, types in QUEST_CATEGORIES.items():
                    if quest['quest_type'] in types:
                        categorized_quests[category].append(quest)
                        found_category = True
                        break
                if not found_category:
                    other_quests.append(quest)

            # Hi·ªÉn th·ªã nhi·ªám v·ª• theo t·ª´ng category
            for category, quests_in_category in categorized_quests.items():
                if not quests_in_category:
                    continue

                field_value = ""
                for quest in quests_in_category:
                    progress = quest['progress']
                    target = quest['target_value']

                    fill = 'üü©'
                    empty = '‚¨õ'
                    bar_len = 10
                    percent = min(1.0, progress /
                                target) if target > 0 else 1.0
                    progress_bar = f"`{fill * int(percent * bar_len)}{empty * (bar_len - int(percent * bar_len))}`"

                    status_icon = "‚úÖ" if quest['is_completed'] else "‚è≥"

                    field_value += (
                        f"{status_icon} **{quest['name']} ({min(progress, target):,}/{target:,}):** *{quest['description']}*\n"
                        f"> {progress_bar} **Th∆∞·ªüng:** {quest['reward_coin']:,} ü™ô ‚Ä¢ {quest['reward_xp']} ‚≠ê\n\n"
                    )

                embed.add_field(name=f"**{category}**",
                                value=field_value.strip(), inline=False)

        view = QuestView(member, user_quests, self)

        # --- PH·∫¶N S·ª¨A L·ªñI LOGIC PH·∫¢N H·ªíI ---
        if isinstance(message_or_ctx, discord.Message):
            # Tr∆∞·ªùng h·ª£p n√†y x·∫£y ra khi nh·∫•n n√∫t "Nh·∫≠n th∆∞·ªüng", c·∫ßn EDIT tin nh·∫Øn g·ªëc.
            await message_or_ctx.edit(embed=embed, view=view)
        elif isinstance(message_or_ctx, commands.Context):
            # Tr∆∞·ªùng h·ª£p n√†y l√† khi g·ªçi l·ªánh /nhiemvu ho·∫∑c ?nhiemvu l·∫ßn ƒë·∫ßu.
            # ctx.send() s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω ƒë√∫ng cho c·∫£ slash v√† prefix command.
            await message_or_ctx.send(embed=embed, view=view, ephemeral=True)
        else:
            # Fallback an to√†n, m·∫∑c d√π √≠t khi x·∫£y ra
            print(
                f"DEBUG: message_or_ctx is of unexpected type: {type(message_or_ctx)}")
            # C·ªë g·∫Øng g·ª≠i nh∆∞ m·ªôt context
            try:
                await message_or_ctx.send(embed=embed, view=view, ephemeral=True)
            except Exception as e:
                print(f"Error in fallback send_quest_embed: {e}")

    @commands.hybrid_command(name="nhiemvu", aliases=['nv', 'quest', 'quests'], description="Xem b·∫£ng nhi·ªám v·ª• h√†ng ng√†y c·ªßa b·∫°n.")
    async def nhiemvu(self, ctx: commands.Context):
        await self.send_quest_embed(ctx, ctx.author)


async def setup(bot):
    await bot.add_cog(Quests(bot))
